[1,["14ZA8I5F1NNLRXXksmvoCb@6c48a","55DvZ3UgVLRJUQZtt8r9FB@f9941","55z3vjFZlDD7XV1JLI4I0i@f9941","3afkYhs8NLJZRtWm+kGBIZ@f9941","13wajD+8NJA6+BLdPeEu7j@f9941","2dTLrFyrFKn4zLt8D1cQEe","13wajD+8NJA6+BLdPeEu7j@6c48a","eaz5aort5LA7RCpCZIMLW2@6c48a","1bmiLemK1MJ7JWVejvluje@6c48a","3afkYhs8NLJZRtWm+kGBIZ@6c48a","43yCtRn69NbbgcgxASZ2IH@6c48a","46cJ1wwtBHBJIZAykpXR92@6c48a","55DvZ3UgVLRJUQZtt8r9FB@6c48a","55z3vjFZlDD7XV1JLI4I0i@6c48a","5cWA3fFVNJ74LqiKWHHEQ8@6c48a","a7krjwJL9EAKyvej5iLgIE@6c48a","43yCtRn69NbbgcgxASZ2IH@f9941","71OCsQer5PdbWfVAgtk7Am","eefa5AjP1LcZWeB9eqidZM@f9941","46cJ1wwtBHBJIZAykpXR92@f9941","18XcdlYV5FhYY4e0gIZ2s7@784fb","5cWA3fFVNJ74LqiKWHHEQ8@f9941","7eDdSSFSVDaKA/X7YvdT1z@d5570","70sWIR0SdKmrXGjeIAJ69P","a84xqNloVAJ5jFzp5Bt8iO@f9941","1bmiLemK1MJ7JWVejvluje@f9941","d8cjoq3Q9JmJCL/wAa9Jbx","baebW/QaNPZpA0wnUA6KU/","edI7yoOhBLmaE/r+W6UVQK","a84xqNloVAJ5jFzp5Bt8iO@6c48a","5aNxVe+pNHYbN1KP6oDXTt","8d0emafflFMofyEeARo+tT@6c48a","53WzStD/1HjYeFex2TuIu5","eefa5AjP1LcZWeB9eqidZM@6c48a"],["node","_textureSource","_spriteFrame","_normalMap","_parent","shadowMaterial","_effectAsset","_cameraComponent","dynamicShadowMapCamera","ambientShadowMapCamera","scene","_skeletonData","_lightSpriteFrame","_defaultClip","_ambientShadowTexture","lightReceiverEffect","srcTexture"],["cc.SpriteFrame","cc.ImageAsset","cc.Texture2D",["cc.Node",["_name","_objFlags","_id","_layer","_components","_parent","_lpos","_children","_lscale"],-1,9,1,5,2,5],["cc.UITransform",["_name","node","_contentSize","_anchorPoint"],2,1,5,5],["cc.Camera",["_orthoHeight","_far","_visibility","_projection","_priority","_near","_fov","_clearFlags","_name","_color","node"],-6,5,1],["cc.Sprite",["_sizeMode","_isTrimmedMode","_type","node","_spriteFrame"],0,1,6],["cc.EffectAsset",["_name","shaders","techniques","combinations"],-1],["cc.Node",["_name","_objFlags","_parent","_components","_lpos"],1,1,12,5],["4ca56lcxBFIsY7PWrSDTLUX",["_receiveLayer","_normalMapOnOff","node","_normalMap"],1,1,6],["RenderQueueDesc",["stages","isTransparent","sortMode"],0],["sp.SkeletonData",["_name","_atlasText","textureNames","_skeletonJson","textures"],-1,3],["cc.SceneAsset",["_name"],2],["cc.Node",["_name","_objFlags","_parent","_components","_lpos"],1,1,2,5],["cc.Animation",["playOnLoad","node","_clips","_defaultClip"],2,1,3,6],["083d8ftuS9OLodO1ov/lYhG",["_enabled","node"],2,1],["fe53c3SkKlJG5HxzWZ7vZv0",["node"],3,1],["cc.Canvas",["_name","node","_cameraComponent"],2,1,1],["cc.Widget",["_alignFlags","_originalWidth","_originalHeight","node"],0,1],["3f8b2gb2MdDmLKfS4MVBLC+",["_lightToLayers","_intensity","_innerRadius","_outerRadius","_lightHeight","_radius","_falloffRange","_falloffExponent","_rectWidth","_rectHeight","node","_lightSpriteFrame"],-7,1,6],["3c690zIFo1HRYEnFXkZkt1n",["degSpeed","node","targetNode"],2,1,1],["sp.Skeleton",["defaultSkin","defaultAnimation","_premultipliedAlpha","_preCacheMode","node","_skeletonData"],-1,1,6],["cc.PolygonCollider2D",["_density","_sensor","node","_points"],1,1,12],["a99678uP4JBkJT9fuAgb40o",["node"],3,1],["cc.Scene",["_name","_children","_prefab","_globals"],2,2,4,4],["cc.PrefabInfo",["root","asset","fileId","instance","nestedPrefabInstanceRoots","targetOverrides"],-3],["cc.SceneGlobals",["ambient","shadows","_skybox","fog","octree","skin","lightProbeInfo","postSettings"],3,4,4,4,4,4,4,4,4],["cc.AmbientInfo",["_skyIllumLDR","_skyColorHDR","_skyColorLDR"],2,5,5],["cc.ShadowsInfo",["_size"],3,5],["cc.SkyboxInfo",[],3],["cc.FogInfo",["_fogColor"],3,5],["cc.OctreeInfo",[],3],["cc.SkinInfo",[],3],["cc.LightProbeInfo",[],3],["cc.PostSettingsInfo",[],3],["5361drGw2JOv7sQ72w97yfU",["yFollow","node","targetNode"],2,1,1],["275c7r8NpJJ07cuaGDhSDvr",["node","cameraGame"],3,1,1],["364e94LpMpC+YCILKxxvY4A",["node","cameraGame"],3,1,1],["a4900fsVDxIMbuzfCJTkO8F",["_ambientIntensity","_ambienShadowAngle","_enableNormalMaps","_enableMaterialCache","_enableShadow","node","_ambientShadowColor","ambientShadowMapCamera","cameraGame","dynamicShadowMapCamera","_ambientShadowTexture","lightReceiverEffect"],-2,1,5,1,1,1,6,6],["4eb29g7LQJExqOvuzLQ6koN",["node","shadowMaterial"],3,1,6],["c3da3/S3WxOdYqUL9m2SWVE",["node","shadowMaterial"],3,1,6],["cc.PhysicsMaterial",["_name","_friction","_rollingFriction","_spinningFriction","_restitution"],-2],["cc.Material",["_name","_states","_defines","_props"],0,12],["ForwardPipeline",["_flows"],3,9],["ShadowFlow",["_name","_stages"],2,9],["ShadowStage",["_name"],2],["ForwardFlow",["_name","_priority","_stages"],1,9],["ForwardStage",["_name","renderQueues"],2,9]],[[4,1,2,1],[6,0,1,3,4,3],[9,0,1,2,3,3],[3,0,1,5,4,3],[3,0,1,5,4,6,3],[7,0,1,2,4],[3,0,5,4,6,8,2],[8,0,1,2,3,4,3],[4,1,1],[15,0,1,2],[16,0,1],[42,0,1,2,3,4],[7,0,3,1,2,5],[11,0,1,2,3,4,5],[12,0,2],[3,0,1,7,4,3],[3,0,1,3,2,7,4,6,5],[3,0,5,7,4,6,2],[3,0,1,2,7,4],[3,0,5,4,6,2],[8,0,2,3,4,2],[13,0,1,2,3,4,3],[4,0,1,2,2],[4,1,2,3,1],[6,0,3,4,2],[6,2,0,1,3,4,4],[14,0,1,2,3,2],[9,2,1],[17,0,1,2,2],[18,0,1,2,3,4],[19,0,1,2,3,4,5,6,7,8,9,10,11,11],[20,0,1,2,2],[21,0,1,2,3,4,5,5],[22,0,1,2,3,3],[23,0,1],[5,4,6,0,1,2,9,6],[5,3,4,0,1,7,2,10,9,7],[5,3,0,5,1,2,10,9,6],[5,8,3,0,5,1,2,10,9,7],[24,0,1,2,3,2],[25,0,1,2,3,4,5,7],[26,0,1,2,3,4,5,6,7,1],[27,0,1,2,2],[28,0,1],[29,1],[30,0,1],[31,1],[32,1],[33,1],[34,1],[35,0,1,2,2],[36,0,1,1],[37,0,1,1],[38,0,1,2,3,4,5,6,7,8,9,10,11,6],[39,0,1,1],[40,0,1,1],[41,0,1,2,3,4,6],[43,0,1],[44,0,1,2],[45,0,2],[46,0,1,2,3],[47,0,1,2],[10,0,2],[10,1,2,0,4]],[[[{"fmt":"0","w":0,"h":0},-1],[1],0,[],[],[]],[[{"base":"2,2,2,2,0,0","mipmaps":["13wajD+8NJA6+BLdPeEu7j"]}],[2],0,[],[],[]],[[{"name":"foreground_02_n","rect":{"x":0,"y":0,"width":1920,"height":1080},"offset":{"x":0,"y":0},"originalSize":{"width":1920,"height":1080},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-960,-540,0,960,-540,0,-960,540,0,960,540,0],"indexes":[0,1,2,2,1,3],"uv":[0,1080,1920,1080,0,0,1920,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-960,"y":-540,"z":0},"maxPos":{"x":960,"y":540,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[1],[6]],[[{"fmt":"0","w":0,"h":0},-1],[1],0,[],[],[]],[[{"base":"2,2,2,2,0,0","mipmaps":["14ZA8I5F1NNLRXXksmvoCb"]}],[2],0,[],[],[]],[[{"name":"gecko_scaled","rect":{"x":256,"y":326,"width":247,"height":256},"offset":{"x":0,"y":0},"originalSize":{"width":247,"height":256},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[1],[7]],[[{"fmt":"0","w":0,"h":0},-1],[1],0,[],[],[]],[[{"base":"2,2,2,2,0,0","mipmaps":["1bmiLemK1MJ7JWVejvluje"]}],[2],0,[],[],[]],[[{"name":"ambient-shadow-cicle","rect":{"x":0,"y":0,"width":256,"height":256},"offset":{"x":0,"y":0},"originalSize":{"width":256,"height":256},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-128,-128,0,128,-128,0,-128,128,0,128,128,0],"indexes":[0,1,2,2,1,3],"uv":[0,256,256,256,0,0,256,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-128,"y":-128,"z":0},"maxPos":{"x":128,"y":128,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[1],[8]],[[{"fmt":"0","w":0,"h":0},-1],[1],0,[],[],[]],[[{"base":"2,2,2,2,0,0","mipmaps":["3afkYhs8NLJZRtWm+kGBIZ"]}],[2],0,[],[],[]],[[{"name":"foreground_02","rect":{"x":0,"y":0,"width":1920,"height":1080},"offset":{"x":0,"y":0},"originalSize":{"width":1920,"height":1080},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-960,-540,0,960,-540,0,-960,540,0,960,540,0],"indexes":[0,1,2,2,1,3],"uv":[0,1080,1920,1080,0,0,1920,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-960,"y":-540,"z":0},"maxPos":{"x":960,"y":540,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[1],[9]],[[{"fmt":"0","w":0,"h":0},-1],[1],0,[],[],[]],[[{"base":"2,2,2,2,0,0","mipmaps":["43yCtRn69NbbgcgxASZ2IH"]}],[2],0,[],[],[]],[[{"name":"background_01","rect":{"x":0,"y":0,"width":1920,"height":1080},"offset":{"x":0,"y":0},"originalSize":{"width":1920,"height":1080},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-960,-540,0,960,-540,0,-960,540,0,960,540,0],"indexes":[0,1,2,2,1,3],"uv":[0,1080,1920,1080,0,0,1920,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-960,"y":-540,"z":0},"maxPos":{"x":960,"y":540,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[1],[10]],[[{"fmt":"0","w":0,"h":0},-1],[1],0,[],[],[]],[[{"base":"2,2,2,2,0,0","mipmaps":["46cJ1wwtBHBJIZAykpXR92"]}],[2],0,[],[],[]],[[{"name":"gizmo_light","rect":{"x":0,"y":0,"width":128,"height":128},"offset":{"x":0,"y":0},"originalSize":{"width":128,"height":128},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-64,-64,0,64,-64,0,-64,64,0,64,64,0],"indexes":[0,1,2,2,1,3],"uv":[0,128,128,128,0,0,128,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-64,"y":-64,"z":0},"maxPos":{"x":64,"y":64,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[1],[11]],[[[5,"../Light2D/ambient-shadow",[{"hash":1206191742,"name":"../Light2D/ambient-shadow|unlit-vs:vert|unlit-fs:frag","blocks":[{"name":"params","stageFlags":1,"binding":0,"members":[{"name":"dirShadowOffsetX","type":13,"count":1},{"name":"dirShadowOffsetY","type":13,"count":1},{"name":"dirLightAngleSin","type":13,"count":1},{"name":"dirLightAngleCos","type":13,"count":1},{"name":"dirShadowScaleX","type":13,"count":1},{"name":"dirShadowScaleY","type":13,"count":1}],"defines":[]},{"name":"paramsFS","stageFlags":16,"binding":1,"members":[{"name":"dirShadowColor","type":16,"count":1}],"defines":[]}],"samplerTextures":[{"name":"srcTexture","type":28,"count":1,"stageFlags":16,"sampleType":0,"binding":2,"defines":[]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_matWorld0","format":44,"isInstanced":true,"location":0,"defines":["USE_INSTANCING"]},{"name":"a_matWorld1","format":44,"isInstanced":true,"location":1,"defines":["USE_INSTANCING"]},{"name":"a_matWorld2","format":44,"isInstanced":true,"location":2,"defines":["USE_INSTANCING"]},{"name":"a_position","format":32,"location":3,"defines":[]},{"name":"a_texCoord","format":21,"location":4,"defines":[]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"descriptors":[{"rate":0,"blocks":[{"name":"CCLocal","stageFlags":1,"tags":{"builtin":"local"},"members":[{"name":"cc_matWorld","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matWorldIT","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_lightingMapUVParam","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_localShadowBias","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeData1","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeData2","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeBlendData1","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeBlendData2","typename":"vec4","type":16,"count":1,"precision":"highp "}],"defines":["!USE_INSTANCING"]}],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":1,"blocks":[{"name":"params","stageFlags":1,"binding":0,"members":[{"name":"dirShadowOffsetX","type":13,"count":1},{"name":"dirShadowOffsetY","type":13,"count":1},{"name":"dirLightAngleSin","type":13,"count":1},{"name":"dirLightAngleCos","type":13,"count":1},{"name":"dirShadowScaleX","type":13,"count":1},{"name":"dirShadowScaleY","type":13,"count":1}],"defines":[]},{"name":"paramsFS","stageFlags":16,"binding":1,"members":[{"name":"dirShadowColor","type":16,"count":1}],"defines":[]}],"samplerTextures":[{"name":"srcTexture","type":28,"count":1,"stageFlags":16,"sampleType":0,"binding":2,"defines":[]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":2,"blocks":[],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":3,"blocks":[{"name":"CCGlobal","stageFlags":1,"tags":{"builtin":"global"},"members":[{"name":"cc_time","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_screenSize","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_nativeSize","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_probeInfo","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_debug_view_mode","typename":"vec4","type":16,"count":1,"precision":"mediump "}],"defines":[]},{"name":"CCCamera","stageFlags":1,"tags":{"builtin":"global"},"members":[{"name":"cc_matView","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matProj","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matProjInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewProj","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewProjInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_cameraPos","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_surfaceTransform","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_screenScale","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_exposure","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_mainLitDir","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_mainLitColor","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_ambientSky","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_ambientGround","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogColor","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogBase","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogAdd","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_nearFar","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_viewPort","typename":"vec4","type":16,"count":1,"precision":"mediump "}],"defines":[]}],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]}],"glsl3":{"vert":"\nprecision highp float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n  mediump vec4 cc_probeInfo;\n  mediump vec4 cc_debug_view_mode;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_surfaceTransform;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n#define LIGHT_MAP_TYPE_DISABLED 0\n#define LIGHT_MAP_TYPE_ALL_IN_ONE 1\n#define LIGHT_MAP_TYPE_INDIRECT_OCCLUSION 2\n#define REFLECTION_PROBE_TYPE_NONE 0\n#define REFLECTION_PROBE_TYPE_CUBE 1\n#define REFLECTION_PROBE_TYPE_PLANAR 2\n#define REFLECTION_PROBE_TYPE_BLEND 3\n#define REFLECTION_PROBE_TYPE_BLEND_AND_SKYBOX 4\n#define LIGHT_TYPE_DIRECTIONAL 0.0\n#define LIGHT_TYPE_SPHERE 1.0\n#define LIGHT_TYPE_SPOT 2.0\n#define LIGHT_TYPE_POINT 3.0\n#define LIGHT_TYPE_RANGED_DIRECTIONAL 4.0\n#define IS_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_DIRECTIONAL)) < EPSILON_LOWP)\n#define IS_SPHERE_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPHERE)) < EPSILON_LOWP)\n#define IS_SPOT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPOT)) < EPSILON_LOWP)\n#define IS_POINT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_POINT)) < EPSILON_LOWP)\n#define IS_RANGED_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_RANGED_DIRECTIONAL)) < EPSILON_LOWP)\n#define TONE_MAPPING_ACES 0\n#define TONE_MAPPING_LINEAR 1\n#define SURFACES_MAX_TRANSMIT_DEPTH_VALUE 999999.0\n#ifndef CC_SURFACES_DEBUG_VIEW_SINGLE\n  #define CC_SURFACES_DEBUG_VIEW_SINGLE 1\n#endif\n#ifndef CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC\n  #define CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC 2\n#endif\n#if !USE_INSTANCING\n  layout(std140) uniform CCLocal {\n    highp mat4 cc_matWorld;\n    highp mat4 cc_matWorldIT;\n    highp vec4 cc_lightingMapUVParam;\n    highp vec4 cc_localShadowBias;\n    highp vec4 cc_reflectionProbeData1;\n    highp vec4 cc_reflectionProbeData2;\n    highp vec4 cc_reflectionProbeBlendData1;\n    highp vec4 cc_reflectionProbeBlendData2;\n  };\n#endif\n#if USE_INSTANCING\n  in vec4 a_matWorld0;\n  in vec4 a_matWorld1;\n  in vec4 a_matWorld2;\n#endif\nin vec3 a_position;\nin vec2 a_texCoord;\nout vec2 v_uv;\nlayout(std140) uniform params{\n  float dirShadowOffsetX;\n  float dirShadowOffsetY;\n  float dirLightAngleSin;\n  float dirLightAngleCos;\n  float dirShadowScaleX;\n  float dirShadowScaleY;\n};\nvoid CCGetWorldMatrix(out mat4 matWorld)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n  #else\n    matWorld = cc_matWorld;\n  #endif\n}\nvec4 vert () {\n  mat4 matWorld;\n  CCGetWorldMatrix(matWorld);\n  v_uv= a_texCoord;\n  vec4 originalPosition = vec4(a_position.x*dirShadowScaleX,a_position.y*dirShadowScaleY,a_position.z , 1.0);\n  vec3 lightDirection = vec3(-dirLightAngleCos, 1.0, dirLightAngleSin);\n  vec3 lightDirectionNormal = normalize(lightDirection);\n  vec4 worldPos = matWorld * originalPosition;\n  vec4 centerPoint = vec4(0, 0, 0, 1);\n  centerPoint = matWorld * centerPoint;\n  vec3 shadowCenter = centerPoint.xyz;\n  vec3 normalVec = normalize(vec3(0, 1.0,0.5));\n  vec3 pointOnPlane = shadowCenter;\n  vec3 toPlane = pointOnPlane - worldPos.xyz;\n  toPlane.z = 0.0;\n  float projectionDistance = dot(toPlane, normalVec) / dot(lightDirectionNormal, normalVec);\n  vec4 pos = worldPos;\n  pos.xyz += projectionDistance * lightDirectionNormal;\n  pos.xyz += vec3(dirShadowOffsetX, dirShadowOffsetY, 0.0);\n  return  cc_matProj * cc_matView   *  pos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nin vec2 v_uv;\nuniform sampler2D srcTexture;\nlayout(std140) uniform paramsFS {\n  vec4 dirShadowColor;\n};\nvec4 frag () {\n  vec4 col=texture(srcTexture,v_uv);\n  vec4 result = vec4(1.0,1.0,1.0,col.a) * dirShadowColor;\n  return result;\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl1":{"vert":"\nprecision highp float;\nuniform highp mat4 cc_matView;\n  uniform highp mat4 cc_matProj;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n#define LIGHT_MAP_TYPE_DISABLED 0\n#define LIGHT_MAP_TYPE_ALL_IN_ONE 1\n#define LIGHT_MAP_TYPE_INDIRECT_OCCLUSION 2\n#define REFLECTION_PROBE_TYPE_NONE 0\n#define REFLECTION_PROBE_TYPE_CUBE 1\n#define REFLECTION_PROBE_TYPE_PLANAR 2\n#define REFLECTION_PROBE_TYPE_BLEND 3\n#define REFLECTION_PROBE_TYPE_BLEND_AND_SKYBOX 4\n#define LIGHT_TYPE_DIRECTIONAL 0.0\n#define LIGHT_TYPE_SPHERE 1.0\n#define LIGHT_TYPE_SPOT 2.0\n#define LIGHT_TYPE_POINT 3.0\n#define LIGHT_TYPE_RANGED_DIRECTIONAL 4.0\n#define IS_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_DIRECTIONAL)) < EPSILON_LOWP)\n#define IS_SPHERE_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPHERE)) < EPSILON_LOWP)\n#define IS_SPOT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPOT)) < EPSILON_LOWP)\n#define IS_POINT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_POINT)) < EPSILON_LOWP)\n#define IS_RANGED_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_RANGED_DIRECTIONAL)) < EPSILON_LOWP)\n#define TONE_MAPPING_ACES 0\n#define TONE_MAPPING_LINEAR 1\n#define SURFACES_MAX_TRANSMIT_DEPTH_VALUE 999999.0\n#ifndef CC_SURFACES_DEBUG_VIEW_SINGLE\n  #define CC_SURFACES_DEBUG_VIEW_SINGLE 1\n#endif\n#ifndef CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC\n  #define CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC 2\n#endif\n#if !USE_INSTANCING\n  uniform highp mat4 cc_matWorld;\n#endif\n#if USE_INSTANCING\n  attribute vec4 a_matWorld0;\n  attribute vec4 a_matWorld1;\n  attribute vec4 a_matWorld2;\n#endif\nattribute vec3 a_position;\nattribute vec2 a_texCoord;\nvarying vec2 v_uv;\n    uniform float dirShadowOffsetX;\n    uniform float dirShadowOffsetY;\n    uniform float dirLightAngleSin;\n    uniform float dirLightAngleCos;\n    uniform float dirShadowScaleX;\n    uniform float dirShadowScaleY;\nvoid CCGetWorldMatrix(out mat4 matWorld)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n  #else\n    matWorld = cc_matWorld;\n  #endif\n}\nvec4 vert () {\n  mat4 matWorld;\n  CCGetWorldMatrix(matWorld);\n  v_uv= a_texCoord;\n  vec4 originalPosition = vec4(a_position.x*dirShadowScaleX,a_position.y*dirShadowScaleY,a_position.z , 1.0);\n  vec3 lightDirection = vec3(-dirLightAngleCos, 1.0, dirLightAngleSin);\n  vec3 lightDirectionNormal = normalize(lightDirection);\n  vec4 worldPos = matWorld * originalPosition;\n  vec4 centerPoint = vec4(0, 0, 0, 1);\n  centerPoint = matWorld * centerPoint;\n  vec3 shadowCenter = centerPoint.xyz;\n  vec3 normalVec = normalize(vec3(0, 1.0,0.5));\n  vec3 pointOnPlane = shadowCenter;\n  vec3 toPlane = pointOnPlane - worldPos.xyz;\n  toPlane.z = 0.0;\n  float projectionDistance = dot(toPlane, normalVec) / dot(lightDirectionNormal, normalVec);\n  vec4 pos = worldPos;\n  pos.xyz += projectionDistance * lightDirectionNormal;\n  pos.xyz += vec3(dirShadowOffsetX, dirShadowOffsetY, 0.0);\n  return  cc_matProj * cc_matView   *  pos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nvarying vec2 v_uv;\nuniform sampler2D srcTexture;\n   uniform vec4 dirShadowColor;\nvec4 frag () {\n  vec4 col=texture2D(srcTexture,v_uv);\n  vec4 result = vec4(1.0,1.0,1.0,col.a) * dirShadowColor;\n  return result;\n}\nvoid main() { gl_FragColor = frag(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCLocal","defines":["!USE_INSTANCING"]}],"samplerTextures":[],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":62,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":1}},"defines":[{"name":"USE_INSTANCING","type":"boolean"}]}],[{"name":"opaque","passes":[{"program":"../Light2D/ambient-shadow|unlit-vs:vert|unlit-fs:frag","blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":4,"blendDstAlpha":4}]},"rasterizerState":{"cullMode":0},"depthStencilState":{"depthTest":false,"depthWrite":false},"properties":{"dirLightAngleSin":{"type":13,"value":[0]},"dirLightAngleCos":{"type":13,"value":[0]},"dirShadowOffsetX":{"type":13,"value":[0]},"dirShadowOffsetY":{"type":13,"value":[0]},"dirShadowScaleX":{"type":13,"value":[1]},"dirShadowScaleY":{"type":13,"value":[1]},"dirShadowColor":{"type":16,"value":[0,0,0,0.6]},"srcTexture":{"value":"white","type":28}}}]}]]],0,0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[1],0,[],[],[]],[[{"base":"2,2,2,2,0,0","mipmaps":["55DvZ3UgVLRJUQZtt8r9FB"]}],[2],0,[],[],[]],[[{"name":"foreground_01","rect":{"x":0,"y":0,"width":1920,"height":1080},"offset":{"x":0,"y":0},"originalSize":{"width":1920,"height":1080},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-960,-540,0,960,-540,0,-960,540,0,960,540,0],"indexes":[0,1,2,2,1,3],"uv":[0,1080,1920,1080,0,0,1920,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-960,"y":-540,"z":0},"maxPos":{"x":960,"y":540,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[1],[12]],[[{"fmt":"0","w":0,"h":0},-1],[1],0,[],[],[]],[[{"base":"2,2,2,2,0,0","mipmaps":["55z3vjFZlDD7XV1JLI4I0i"]}],[2],0,[],[],[]],[[{"name":"foreground_01_n","rect":{"x":0,"y":0,"width":1920,"height":1080},"offset":{"x":0,"y":0},"originalSize":{"width":1920,"height":1080},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-960,-540,0,960,-540,0,-960,540,0,960,540,0],"indexes":[0,1,2,2,1,3],"uv":[0,1080,1920,1080,0,0,1920,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-960,"y":-540,"z":0},"maxPos":{"x":960,"y":540,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[1],[13]],[[[5,"../Light2D/light-shadow-mesh",[{"hash":1377376679,"name":"../Light2D/light-shadow-mesh|mesh-vs:vert|mesh-fs:frag","blocks":[{"name":"PARAMS","stageFlags":16,"binding":0,"members":[{"name":"color","type":16,"count":1},{"name":"sourceId","type":13,"count":1}],"defines":[]}],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"descriptors":[{"rate":0,"blocks":[{"name":"CCLocal","stageFlags":1,"tags":{"builtin":"local"},"members":[{"name":"cc_matWorld","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matWorldIT","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_lightingMapUVParam","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_localShadowBias","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeData1","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeData2","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeBlendData1","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeBlendData2","typename":"vec4","type":16,"count":1,"precision":"highp "}],"defines":["USE_LOCAL"]}],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":1,"blocks":[{"name":"PARAMS","stageFlags":16,"binding":0,"members":[{"name":"color","type":16,"count":1},{"name":"sourceId","type":13,"count":1}],"defines":[]}],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":2,"blocks":[],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":3,"blocks":[{"name":"CCGlobal","stageFlags":1,"tags":{"builtin":"global"},"members":[{"name":"cc_time","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_screenSize","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_nativeSize","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_probeInfo","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_debug_view_mode","typename":"vec4","type":16,"count":1,"precision":"mediump "}],"defines":[]},{"name":"CCCamera","stageFlags":1,"tags":{"builtin":"global"},"members":[{"name":"cc_matView","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matProj","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matProjInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewProj","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewProjInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_cameraPos","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_surfaceTransform","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_screenScale","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_exposure","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_mainLitDir","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_mainLitColor","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_ambientSky","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_ambientGround","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogColor","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogBase","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogAdd","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_nearFar","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_viewPort","typename":"vec4","type":16,"count":1,"precision":"mediump "}],"defines":[]}],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]}],"glsl3":{"vert":"\nprecision highp float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n  mediump vec4 cc_probeInfo;\n  mediump vec4 cc_debug_view_mode;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_surfaceTransform;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\n#if USE_LOCAL\n  layout(std140) uniform CCLocal {\n    highp mat4 cc_matWorld;\n    highp mat4 cc_matWorldIT;\n    highp vec4 cc_lightingMapUVParam;\n    highp vec4 cc_localShadowBias;\n    highp vec4 cc_reflectionProbeData1;\n    highp vec4 cc_reflectionProbeData2;\n    highp vec4 cc_reflectionProbeBlendData1;\n    highp vec4 cc_reflectionProbeBlendData2;\n  };\n#endif\nin vec3 a_position;\nout vec3 fragPos;\nvec4 vert () {\n  vec4 pos = vec4(a_position, 1);\n  #if USE_LOCAL\n    fragPos = (cc_matWorld * pos).xyz;\n    pos = cc_matWorld * pos;\n  #else\n    fragPos = a_position;\n  #endif\n  pos = cc_matViewProj * pos;\n  return pos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\n  precision highp float;\n  in vec3 fragPos;\n    layout(std140) uniform PARAMS{\n    vec4 color;\n    float sourceId;\n  };\n  vec4 setBitmask(float id) {\n      int idx = int(id);\n      int channel = idx / 8;\n      int bit = idx - channel * 8;\n      int mask = 1 << bit;\n      float v = float(mask) / 255.0;\n      if (channel == 0) return vec4(v, 0.0, 0.0, 0.0);\n      if (channel == 1) return vec4(0.0, v, 0.0, 0.0);\n      if (channel == 2) return vec4(0.0, 0.0, v, 0.0);\n      if (channel == 3) return vec4(0.0, 0.0, 0.0, v);\n      return vec4(0.0);\n  }\n  vec4 frag () {\n    if(sourceId < 0.0) return vec4(0.0);\n    return setBitmask(sourceId);\n  }\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl1":{"vert":"\nprecision highp float;\nuniform highp mat4 cc_matViewProj;\n#if USE_LOCAL\n  uniform highp mat4 cc_matWorld;\n#endif\nattribute vec3 a_position;\nvarying vec3 fragPos;\nvec4 vert () {\n  vec4 pos = vec4(a_position, 1);\n  #if USE_LOCAL\n    fragPos = (cc_matWorld * pos).xyz;\n    pos = cc_matWorld * pos;\n  #else\n    fragPos = a_position;\n  #endif\n  pos = cc_matViewProj * pos;\n  return pos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\n  precision highp float;\n  varying vec3 fragPos;\n           uniform float sourceId;\n  vec4 setBitmask(float id) {\n    int idx = int(id);\n    int channel = idx / 8;\n    int bit = idx -  channel* 8;\n    float v = pow(2.0, float(bit)) / 255.0;\n    if (channel == 0) return vec4(v, 0.0, 0.0, 0.0);\n    if (channel == 1) return vec4(0.0, v, 0.0, 0.0);\n    if (channel == 2) return vec4(0.0, 0.0, v, 0.0);\n    if (channel == 3) return vec4(0.0, 0.0, 0.0, v);\n    return vec4(0.0);\n  }\n  vec4 frag () {\n    if(sourceId < 0.0) return vec4(0.0);\n    return setBitmask(sourceId);\n  }\nvoid main() { gl_FragColor = frag(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCLocal","defines":["USE_LOCAL"]}],"samplerTextures":[],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":56,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":2}},"defines":[{"name":"USE_LOCAL","type":"boolean"}]}],[{"passes":[{"program":"../Light2D/light-shadow-mesh|mesh-vs:vert|mesh-fs:frag","blendState":{"targets":[{"blend":true,"blendSrc":1,"blendDst":1}]},"rasterizerState":{"cullMode":0},"depthStencilState":{"depthTest":false,"depthWrite":false},"properties":{"color":{"type":16,"value":[0,0,0,1]},"sourceId":{"type":13,"value":[0]}}}]}]]],0,0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[1],0,[],[],[]],[[{"base":"2,2,2,2,0,0","mipmaps":["5cWA3fFVNJ74LqiKWHHEQ8"]}],[2],0,[],[],[]],[[{"name":"woodbox","rect":{"x":0,"y":0,"width":256,"height":256},"offset":{"x":0,"y":0},"originalSize":{"width":256,"height":256},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-128,-128,0,128,-128,0,-128,128,0,128,128,0],"indexes":[0,1,2,2,1,3],"uv":[0,256,256,256,0,0,256,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-128,"y":-128,"z":0},"maxPos":{"x":128,"y":128,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[1],[14]],[[[13,"man_et","\nman_et.png\nsize: 1024,1024\nformat: RGBA8888\nfilter: Linear,Linear\nrepeat: none\nbody\n  rotate: false\n  xy: 2, 258\n  size: 206, 291\n  orig: 206, 291\n  offset: 0, 0\n  index: -1\nhead\n  rotate: false\n  xy: 2, 551\n  size: 296, 458\n  orig: 296, 458\n  offset: 0, 0\n  index: -1\nleftArmUp\n  rotate: false\n  xy: 146, 2\n  size: 126, 254\n  orig: 126, 254\n  offset: 0, 0\n  index: -1\nleftEye\n  rotate: false\n  xy: 300, 891\n  size: 90, 118\n  orig: 90, 118\n  offset: 0, 0\n  index: -1\nleftLegUp\n  rotate: false\n  xy: 210, 327\n  size: 136, 222\n  orig: 136, 222\n  offset: 0, 0\n  index: -1\nrightArmUp\n  rotate: false\n  xy: 2, 22\n  size: 142, 234\n  orig: 142, 234\n  offset: 0, 0\n  index: -1\nrightEye\n  rotate: true\n  xy: 210, 269\n  size: 56, 105\n  orig: 56, 105\n  offset: 0, 0\n  index: -1\nrightLegUp\n  rotate: false\n  xy: 274, 48\n  size: 118, 219\n  orig: 118, 219\n  offset: 0, 0\n  index: -1\n",["man_et.png"],{"skeleton":{"hash":"zSkYKLy/HXrosvt1t2p3XFFIxGY","spine":"3.8.99","x":-149.4,"y":-9.72,"width":320.19,"height":867.19,"images":"./坏蛋/外星人/images/","audio":""},"bones":[{"name":"root"},{"name":"root1","parent":"root","length":321.81,"y":-15.87,"color":"ff0000ff"},{"name":"all","parent":"root1","length":165.02,"x":17.53,"y":305.99,"color":"ff0000ff"},{"name":"body","parent":"all","length":66.89,"rotation":94.4,"x":-3.42,"color":"ff0000ff"},{"name":"chest","parent":"body","length":58.05,"rotation":4.92,"x":66.89,"color":"ff0000ff"},{"name":"head","parent":"chest","length":50.45,"rotation":-9.32,"x":57.64,"y":-2.53,"color":"ff0000ff"},{"name":"leftArmUp","parent":"chest","length":66.4,"rotation":153.75,"x":26.49,"y":49.12,"color":"39ff00ff"},{"name":"leftArmDown","parent":"leftArmUp","length":66.98,"rotation":2.89,"x":71.74,"y":-0.53,"color":"39ff00ff"},{"name":"rightArmUp","parent":"chest","length":75.72,"rotation":-167.93,"x":16.71,"y":-49.68,"color":"39ff00ff"},{"name":"rightArmDown","parent":"rightArmUp","length":88.33,"rotation":0.41,"x":77.23,"y":1.18,"color":"39ff00ff"},{"name":"leftLegUp","parent":"all","length":127.11,"rotation":-84.09,"x":-43.88,"y":-48.23,"color":"fdd900ff"},{"name":"leftLegDown","parent":"leftLegUp","length":103.68,"rotation":-24.04,"x":125.29,"y":-0.69,"color":"fdd900ff"},{"name":"rightLegUp","parent":"all","length":130.79,"rotation":-67.49,"x":26.53,"y":-45.59,"color":"fdd900ff"},{"name":"rightLegDown","parent":"rightLegUp","length":99,"rotation":-37.17,"x":131.03,"y":0.58,"color":"fdd900ff"},{"name":"rightFoot_k","parent":"root1","rotation":-90,"x":63.39,"y":59.18,"color":"fdd900ff"},{"name":"rightFoot","parent":"rightLegDown","length":44.34,"rotation":65.13,"x":97.57,"y":-0.87,"color":"fdd900ff"},{"name":"leftFoot_k","parent":"root1","rotation":-95.81,"x":-47.79,"y":47.98,"color":"fdd900ff"},{"name":"leftFoot","parent":"leftLegDown","length":32.65,"rotation":63.13,"x":104.14,"y":1.45,"color":"fdd900ff"},{"name":"leftDress","parent":"body","length":71.81,"rotation":57.81,"x":-109.68,"y":47.7,"color":"096eaeff"},{"name":"rightDress","parent":"body","length":68.48,"rotation":-60.86,"x":-123.24,"y":-29.75,"color":"096eaeff"},{"name":"body7","parent":"chest","x":24.51,"y":56.84,"color":"ff0000ff"},{"name":"weapon","parent":"leftArmDown","length":373.44,"rotation":86.93,"x":109.27,"y":-3.7,"color":"39ff00ff"},{"name":"hair4","parent":"head","length":107.78,"rotation":-0.19,"x":209.35,"y":-17.65,"color":"e8c90bff"},{"name":"hair5","parent":"hair4","length":60.5,"rotation":3.68,"x":106.64,"y":-2.01,"color":"e8c90bff"},{"name":"hair6","parent":"hair5","length":49.07,"rotation":-0.26,"x":63.83,"y":-0.72,"color":"e8c90bff"},{"name":"mouth","parent":"head","length":28.28,"rotation":179.18,"x":30.56,"y":-55.54,"color":"ff0000ff"}],"slots":[{"name":"rightArmUp","bone":"root","attachment":"rightArmUp"},{"name":"rightLegUp","bone":"root","attachment":"rightLegUp"},{"name":"leftLegUp","bone":"root","attachment":"leftLegUp"},{"name":"body","bone":"root","attachment":"body"},{"name":"head","bone":"head","attachment":"head"},{"name":"rightEye","bone":"head","attachment":"rightEye"},{"name":"leftEye","bone":"head","attachment":"leftEye"},{"name":"leftArmUp","bone":"root","attachment":"leftArmUp"}],"ik":[{"name":"leftFoot_k","target":"leftFoot_k","bendPositive":false,"bones":["leftLegUp","leftLegDown"]},{"name":"rightFoot_k","order":1,"target":"rightFoot_k","bendPositive":false,"bones":["rightLegUp","rightLegDown"]}],"skins":[{"name":"default","attachments":{"body":{"body":{"type":"mesh","hull":32,"width":206,"height":291,"uvs":[0.6233,0.0195,0.63969,0.09006,0.72335,0.1324,0.72341,0.18102,0.79838,0.30943,0.86899,0.42498,0.94663,0.57458,0.98285,0.70662,0.98924,0.78723,0.9451,0.85219,0.90585,0.88815,0.85719,0.91502,0.74693,0.95385,0.6482,0.97264,0.53903,0.98304,0.4213,0.99091,0.25374,0.98195,0.14165,0.9628,0.06441,0.93534,0.02769,0.89942,0.01351,0.84906,0.01405,0.80896,0.0417,0.71737,0.07421,0.62648,0.1,0.5355,0.13536,0.38586,0.15558,0.30057,0.09378,0.21117,0.12941,0.13344,0.27176,0.10651,0.30331,0.03482,0.43003,0.00751,0.63295,0.72431],"triangles":[3,26,29,2,3,1,1,3,29,1,29,31,1,31,0,31,29,30,26,27,29,29,27,28,14,15,32,13,14,32,16,32,15,12,13,32,16,22,32,16,21,22,12,32,11,21,17,18,32,22,23,17,21,16,11,32,10,19,20,18,21,18,20,10,32,9,9,32,8,32,7,8,23,24,32,24,25,32,5,32,25,4,25,26,32,6,7,32,5,6,5,25,4,3,4,26],"vertices":[2,3,134.84,-39.35,0.00301,4,64.32,-45.04,0.99699,2,3,114.11,-41.14,0.05939,4,43.51,-45.04,0.94061,2,3,100.5,-57.38,0.20033,4,28.57,-60.05,0.79967,2,3,86.4,-56.3,0.33307,4,14.6,-57.77,0.66693,2,3,47.95,-68.84,0.84211,4,-24.77,-66.96,0.15789,3,3,13.31,-80.76,0.96907,4,-60.31,-75.86,0.01314,19,111.05,94.43,0.01779,2,3,-31.32,-93.37,0.82004,19,100.33,49.31,0.17996,2,3,-70.2,-97.86,0.6104,19,85.32,13.16,0.3896,3,3,-93.69,-97.37,0.48867,19,73.45,-7.12,0.50586,18,-114.25,-90.83,0.00546,3,3,-111.84,-86.86,0.41756,19,55.43,-17.85,0.56215,18,-115.02,-69.86,0.02029,3,3,-121.65,-78,0.38631,19,42.91,-22.1,0.5676,18,-112.75,-56.84,0.04609,3,3,-128.68,-67.4,0.37711,19,30.23,-23.09,0.54778,18,-107.53,-45.24,0.0751,3,3,-138.21,-43.89,0.39339,19,5.06,-19.95,0.468,18,-92.7,-24.66,0.1386,3,3,-142.1,-23.19,0.4151,19,-14.91,-13.27,0.37192,18,-77.26,-10.34,0.21299,3,3,-143.39,-0.53,0.43613,19,-35.33,-3.37,0.26582,18,-58.78,2.83,0.29805,3,3,-143.81,23.82,0.44736,19,-56.81,8.12,0.16235,18,-38.39,16.16,0.3903,3,3,-138.57,58.04,0.45051,19,-84.14,29.37,0.05332,18,-6.64,29.95,0.49617,3,3,-131.24,80.63,0.44983,19,-100.31,46.77,0.01662,18,16.38,35.79,0.53355,3,3,-122.05,95.89,0.46403,19,-109.15,62.22,0.0032,18,34.19,36.14,0.53277,2,3,-111.05,102.63,0.49786,18,45.75,30.42,0.50214,2,3,-96.21,104.41,0.55476,18,55.17,18.82,0.44524,2,3,-84.59,103.41,0.60404,18,60.51,8.45,0.39596,2,3,-58.45,95.68,0.72414,18,67.9,-17.79,0.27586,2,3,-32.6,86.98,0.84555,18,74.31,-44.31,0.15445,3,3,-6.61,79.65,0.9488,4,-66.38,85.67,0.00105,18,81.96,-70.21,0.05015,2,3,36.25,69.05,0.89371,4,-24.59,71.42,0.10629,2,3,60.68,62.99,0.61219,4,-0.78,63.29,0.38781,3,3,87.6,73.69,0.22854,4,26.96,71.64,0.53146,20,2.45,14.81,0.24,3,3,109.59,64.64,0.12962,4,48.09,60.73,0.51838,20,23.58,3.9,0.352,2,3,115.15,34.8,0.05839,4,51.07,30.53,0.94161,2,3,135.45,26.72,0.00254,4,70.61,20.73,0.99746,1,4,74.22,-6.31,1,3,3,-69.81,-25.6,0.76647,19,22.4,48.7,0.1883,18,-40.78,-72.8,0.04523],"edges":[0,62,4,6,8,10,10,12,12,14,14,16,16,18,18,20,20,22,22,24,24,26,28,30,30,32,32,34,34,36,36,38,38,40,40,42,50,52,56,58,60,62,26,28,42,44,44,46,46,48,48,50,6,8,2,4,0,2,58,60,52,54,54,56]}},"head":{"head":{"type":"mesh","hull":20,"width":296,"height":458,"uvs":[0.63614,0.05485,0.6156,0.13926,0.60419,0.18614,0.63288,0.22559,0.6667,0.2721,0.7277,0.31975,0.87725,0.4218,1,0.56752,1,1,0,1,0,0.59416,0.10805,0.42506,0.23437,0.3341,0.3173,0.28478,0.36388,0.24639,0.41172,0.19451,0.4359,0.15237,0.36947,0.08749,0.43277,0.00618,0.56074,0.00656],"triangles":[2,16,1,0,16,19,19,17,18,1,16,0,16,17,19,15,16,2,15,2,3,14,15,3,14,3,4,13,14,4,12,5,6,11,12,6,6,7,10,9,10,8,8,10,7,10,11,6,12,13,5,13,4,5],"vertices":[2,23,102.85,-40.07,0.05392,24,39.2,-39.17,0.94608,3,5,382.41,-47.68,0.0045,23,64.63,-31.65,0.25337,24,0.94,-30.92,0.74212,4,5,360.94,-44.3,0.01658,22,151.68,-26.15,0.00294,23,43.4,-26.98,0.53522,24,-20.31,-26.34,0.44526,4,5,342.87,-52.79,0.04086,22,133.64,-34.7,0.03427,23,24.85,-34.35,0.75355,24,-38.83,-33.8,0.17132,4,5,321.57,-62.8,0.24592,22,112.37,-44.78,0.05521,23,2.98,-43.05,0.6552,24,-60.66,-42.6,0.04367,4,5,299.75,-80.86,0.62871,22,90.61,-62.91,0.06282,23,-19.9,-59.75,0.30331,24,-83.46,-59.4,0.00517,4,5,253.01,-125.13,0.87736,22,44.02,-107.33,0.02945,23,-69.24,-101.09,0.09192,24,-132.62,-100.96,0.00127,3,5,186.27,-161.46,0.9628,22,-22.6,-143.89,0.024,23,-138.07,-133.3,0.0132,1,5,-11.81,-161.46,1,1,5,-11.81,134.54,1,2,5,174.06,134.54,0.95957,22,-35.79,152.07,0.04043,3,5,251.51,102.56,0.85048,22,41.76,120.34,0.14707,23,-56.89,126.26,0.00244,3,5,293.18,65.17,0.63129,22,83.55,83.09,0.36227,23,-17.58,86.41,0.00644,3,5,315.76,40.62,0.2645,22,106.22,58.62,0.58186,23,3.47,60.53,0.15365,4,5,333.34,26.83,0.06102,22,123.85,44.89,0.56473,23,20.18,45.7,0.36521,24,-43.85,46.23,0.00904,4,5,357.11,12.67,0.02471,22,147.66,30.81,0.30849,23,43.04,30.12,0.63065,24,-20.92,30.76,0.03615,4,5,376.41,5.52,0.00696,22,166.98,23.72,0.1117,23,61.87,21.81,0.60202,24,-2.06,22.52,0.27932,3,22,196.63,43.48,0.00807,23,92.72,39.63,0.39838,24,28.72,40.48,0.59355,2,23,128.76,18.66,0.10023,24,64.84,19.67,0.89977,2,23,126.28,-19.14,0.01006,24,62.54,-18.14,0.98994],"edges":[0,38,12,14,18,20,26,28,28,30,30,32,32,34,34,36,36,38,22,24,24,26,8,10,10,12,0,2,2,4,4,6,6,8,20,22,16,18,14,16]}},"leftArmUp":{"leftArmUp":{"type":"mesh","hull":15,"width":126,"height":254,"uvs":[0.81884,0.01,0.90182,0.01755,0.98787,0.10007,0.88941,0.358,0.88395,0.38674,0.87304,0.43625,0.82797,0.64067,0.98667,0.99806,0,1,0,0.70676,0.2766,0.57664,0.4594,0.39301,0.50453,0.34768,0.52667,0.3096,0.69963,0.04656],"triangles":[5,12,4,5,11,12,6,11,5,10,11,6,6,8,9,6,9,10,8,6,7,2,14,0,2,0,1,13,14,2,3,13,2,3,12,13,4,12,3],"vertices":[1,6,-21.06,-8.97,1,1,6,-22.27,1.59,1,1,6,-5.37,18.07,1,2,6,60.92,25.28,0.86322,7,-9.51,26.32,0.13678,2,6,68.1,26.74,0.66266,7,-2.26,27.42,0.33734,2,6,80.53,29.09,0.2893,7,10.27,29.14,0.7107,1,7,62.02,36.22,1,1,7,145.24,77.64,1,1,7,175.87,-42.85,1,1,7,103.61,-60.92,1,1,7,63.09,-35.12,1,2,6,85.2,-23.97,0.04158,7,12.26,-24.09,0.95842,2,6,72.53,-21.88,0.30965,7,-0.29,-21.36,0.69035,2,6,62.46,-22.03,0.66666,7,-10.35,-21,0.33334,1,6,-7.8,-20.63,1],"edges":[0,28,0,2,2,4,4,6,6,8,24,26,26,28,18,20,16,18,12,14,14,16,20,22,22,24,8,10,10,12]}},"leftEye":{"leftEye":{"x":128.19,"y":-18.46,"rotation":-90,"width":90,"height":118}},"leftLegUp":{"leftLegUp":{"type":"mesh","hull":21,"width":136,"height":222,"uvs":[0.95112,0.01817,0.97237,0.05768,0.97913,0.12474,0.96713,0.18117,0.70197,0.32096,0.67694,0.36492,0.64359,0.4235,0.63064,0.46241,0.5567,0.75233,0.64526,0.83571,0.59019,0.95508,0.47297,0.97755,0.17098,0.97752,0.07456,0.91783,0.02576,0.83254,0.02759,0.74935,0.03506,0.40867,0.03808,0.35789,0.04131,0.30358,0.0522,0.12076,0.21504,0.02452],"triangles":[2,0,1,9,10,11,8,11,12,12,13,8,9,11,8,13,14,8,8,14,15,7,8,16,8,15,16,7,16,6,16,17,6,6,17,18,5,6,18,5,18,4,20,4,18,20,18,19,3,4,2,4,20,0,0,2,4],"vertices":[1,2,30.92,-86.87,1,1,2,33.81,-95.64,1,2,10,80.75,59.5,0.56,2,34.73,-110.52,0.44,2,10,92.41,54.63,0.544,2,33.1,-123.05,0.456,1,10,112.88,11.69,1,2,10,121.41,5.84,0.73805,11,-7.4,1.69,0.26195,2,10,132.76,-1.95,0.38902,11,6.07,4.54,0.61098,2,10,140.64,-5.92,0.18781,11,14.37,7.5,0.81219,2,11,74.64,32.22,0.51239,17,14.12,40.22,0.48761,2,11,84.24,52.11,0.13309,17,36.2,40.64,0.86691,2,11,110.79,59.42,0.00847,17,54.72,20.27,0.99153,1,17,50.52,4.1,1,2,11,144.57,13.23,0.03357,17,28.78,-30.74,0.96643,2,11,140.02,-4.85,0.2152,17,10.59,-34.86,0.7848,2,11,127.26,-20.33,0.6749,17,-8.98,-30.47,0.3251,2,11,111.33,-29.68,0.97676,17,-24.52,-20.49,0.02324,2,10,107.86,-80.94,0.16674,11,46.1,-67.97,0.83326,2,10,97.09,-77.59,0.27225,11,36.24,-73.45,0.72775,2,10,85.57,-74,0.40756,11,25.7,-79.32,0.59244,2,10,46.79,-61.91,0.7824,11,-9.79,-99.07,0.2176,2,10,31.99,-34.93,0.91393,11,-39.54,-91.18,0.08607],"edges":[0,2,6,8,16,18,18,20,20,22,22,24,24,26,26,28,38,40,34,36,32,34,36,38,28,30,30,32,40,0,2,4,4,6,8,10,10,12,12,14,14,16]}},"rightArmUp":{"rightArmUp":{"type":"mesh","hull":16,"width":142,"height":234,"uvs":[0.19266,0.01434,0.28929,0.05346,0.44464,0.28416,0.47036,0.31946,0.50219,0.36313,0.71809,0.57643,0.96479,0.59999,0.96479,0.99786,0.10643,0.99786,0.26721,0.68113,0.18338,0.41907,0.16958,0.37775,0.1547,0.34516,0.05084,0.11767,0.08558,0.0489,0.13925,0.01502],"triangles":[14,0,1,0,14,15,2,13,1,1,13,14,2,12,13,11,12,2,11,2,3,10,11,3,10,3,4,9,10,4,9,4,5,5,6,7,9,5,7,8,9,7],"vertices":[1,8,-10.98,10.58,1,1,8,2.55,20.02,1,2,9,-16.23,19.81,0.45959,8,60.86,20.87,0.54041,2,9,-7.2,20.14,0.77499,8,69.88,21.26,0.22501,2,9,3.96,20.54,0.99018,8,81.04,21.74,0.00982,1,9,61.69,30.46,1,1,9,79.82,60.94,1,1,9,166.26,26.36,1,1,9,120.99,-86.81,1,2,9,60.66,-38.08,0.99123,8,138.16,-36.47,0.00877,2,9,-0.7,-26.36,0.11022,8,76.72,-25.18,0.88978,2,9,-10.4,-24.59,0.00738,8,67,-23.48,0.99262,1,8,59.13,-22.67,1,1,8,4.19,-16.99,1,1,8,-9,-6.52,1,1,8,-13.6,3.46,1],"edges":[0,30,0,2,2,4,8,10,26,28,28,30,4,6,6,8,22,24,24,26,20,22,18,20,10,12,12,14,14,16,16,18]}},"rightEye":{"rightEye":{"x":123.69,"y":-117.46,"rotation":-90,"width":56,"height":105}},"rightLegUp":{"rightLegUp":{"type":"mesh","hull":21,"width":118,"height":219,"uvs":[0.73852,0,0.82042,0.02924,0.83234,0.09711,0.84274,0.15642,0.85205,0.20947,0.85203,0.30022,0.85201,0.37328,0.852,0.43173,0.85194,0.65449,0.83547,0.71903,0.97052,0.79594,0.99576,1,0.23247,1,0.22962,0.78337,0.22072,0.72367,0.21163,0.66269,0.15192,0.45959,0.13384,0.39812,0.11412,0.33105,0.05488,0.12957,0.03124,0.03131],"triangles":[12,10,11,12,9,10,13,14,9,14,15,9,12,13,9,9,15,8,8,15,7,16,7,15,16,6,7,2,3,17,2,17,1,0,1,18,16,17,3,1,17,18,4,5,16,18,19,0,4,16,3,19,20,0,5,6,16],"vertices":[2,12,55.58,28.4,1,15,-111.24,126.66,0,2,12,65.93,33.63,1,15,-100.28,130.44,0,2,12,79.54,27.49,1,15,-87.62,122.52,0,2,12,91.44,22.13,1,15,-76.56,115.6,0,3,12,102.08,17.34,0.99881,13,-29.73,-15.34,0.00119,15,-66.67,109.41,0,2,12,119.34,7.5,0.95201,13,-12.13,-6.1,0.04799,1,13,2.04,1.33,1,1,13,13.37,7.28,1,2,13,56.57,29.95,0.89813,15,10.71,50.16,0.10187,2,13,69.99,34.8,0.59533,15,20.75,40.03,0.40467,2,13,77.49,56.74,0.15805,15,43.81,42.44,0.84195,1,15,81.11,17.65,1,2,13,157.54,0.4,0.65971,15,26.37,-53.88,0.34029,3,12,174.95,-108.68,0.00118,13,115.69,-21.95,0.58393,15,-11.51,-25.31,0.41489,3,12,163.07,-103.12,0.01027,13,104.6,-28.96,0.23156,15,-22.53,-18.19,0.75817,3,12,150.93,-97.45,0.03945,13,93.28,-36.12,0.16634,15,-33.79,-10.93,0.79421,2,12,108.79,-81.56,0.55801,13,57.17,-63.03,0.44199,2,12,96.04,-76.75,0.69792,13,46.24,-71.17,0.30208,2,12,82.12,-71.5,0.8262,13,34.32,-80.06,0.1738,3,12,40.32,-55.74,0.96971,13,-1.5,-106.76,0.00829,15,-137.74,45.35,0.022,2,12,20.24,-47.52,0.98823,15,-156.52,56.22,0.01177],"edges":[0,2,16,18,18,20,20,22,38,40,40,0,2,4,28,30,24,26,26,28,22,24,8,10,10,12,4,6,6,8,34,36,12,14,14,16,30,32,32,34,36,38]}}}}],"animations":{"die":{"bones":{"all":{"translate":[{"x":-18.84,"y":-14.48,"curve":0.293,"c2":0.5,"c3":0.625},{"time":0.1333,"x":102.59,"y":-124.41},{"time":0.3333,"x":99.31,"y":-125.58},{"time":0.7667,"x":139.28,"y":-107.52,"curve":0.27},{"time":1.1,"x":308.33,"y":-206}]},"leftLegUp":{"rotate":[{"curve":0.25,"c3":0.576},{"time":0.1333,"angle":19.19,"curve":0.572},{"time":0.8667,"angle":-14.19,"curve":0,"c3":0.421},{"time":1.1,"angle":-84.68,"curve":0.25,"c3":0.75},{"time":1.2667,"angle":-86.4,"curve":0.25,"c3":0.327},{"time":1.5,"angle":-84.68}]},"rightLegUp":{"rotate":[{"curve":0.25,"c3":0.576},{"time":0.1333,"angle":19.19,"curve":0.572},{"time":0.8667,"angle":-24.1,"curve":0,"c3":0.421},{"time":1.1,"angle":-92.88,"curve":0.25,"c3":0.75},{"time":1.2667,"angle":-96.6,"curve":0.25,"c3":0.327},{"time":1.5,"angle":-94.88}]},"leftLegDown":{"rotate":[{"curve":0.25,"c3":0.576},{"time":0.1333,"angle":-113.69,"curve":0.572},{"time":0.8667,"angle":-70.86,"curve":0,"c3":0.421},{"time":1.0333,"angle":-44.96,"curve":0.25,"c3":0.75},{"time":1.2667,"angle":-4.17,"curve":0.25,"c3":0.327},{"time":1.5,"angle":-2.46}]},"rightLegDown":{"rotate":[{"curve":0.25,"c3":0.576},{"time":0.1333,"angle":-113.69,"curve":0.572},{"time":0.8667,"angle":-70.86,"curve":0,"c3":0.421},{"time":1.1,"angle":-13.14,"curve":0.25,"c3":0.75},{"time":1.2667,"angle":-4.17,"curve":0.25,"c3":0.327},{"time":1.5,"angle":-2.46}]},"rightFoot":{"rotate":[{"curve":0.25,"c3":0.576},{"time":0.1333,"angle":-24.82},{"time":0.8667,"angle":-24.72},{"time":1.1,"angle":-44.98}]},"leftFoot":{"rotate":[{"curve":0.25,"c3":0.576},{"time":0.1333,"angle":-24.82},{"time":0.8667,"angle":-24.72},{"time":1.1,"angle":-44.98}]},"body":{"rotate":[{"angle":-16.21,"curve":0.293,"c2":0.5,"c3":0.625},{"time":0.1333,"angle":7.54,"curve":0.365,"c3":0.698,"c4":0.47},{"time":0.7667,"angle":4.24,"curve":0.387,"c2":0.46,"c3":0.72},{"time":1.0333,"angle":-68.82,"curve":0.25,"c3":0.75},{"time":1.1,"angle":-95.46,"curve":0.25,"c3":0.75},{"time":1.2667,"angle":-91.85,"curve":0.25,"c3":0.75},{"time":1.5,"angle":-93.99}],"translate":[{"curve":0.293,"c3":0.625,"c4":0.47},{"time":0.3333,"x":2.96,"y":2.11,"curve":0.301,"c2":0.37,"c3":0.633,"c4":0.78},{"time":0.7667,"x":1.89,"y":0.69,"curve":0.32,"c2":0.62,"c3":0.653},{"time":0.9,"x":3.46,"y":-12.89,"curve":0.25,"c3":0.75},{"time":1.1667,"x":10.62,"y":-26.54}]},"chest":{"rotate":[{"angle":-10.33,"curve":0.293,"c2":0.5,"c3":0.625},{"time":0.1333,"angle":9.83,"curve":0.365,"c3":0.698,"c4":0.47},{"time":0.8667,"angle":18.54,"curve":0.387,"c2":0.46,"c3":0.72},{"time":1.0333,"angle":12.69,"curve":0.25,"c3":0.75},{"time":1.1333,"angle":1.12,"curve":0.25,"c3":0.75},{"time":1.3,"angle":4.72,"curve":0.25,"c3":0.75},{"time":1.5,"angle":2.58}]},"head":{"rotate":[{"angle":-3.81,"curve":0.311,"c2":0.32,"c3":0.644,"c4":0.68},{"time":0.2,"angle":-1.06,"curve":0.303,"c2":0.55,"c3":0.635},{"time":0.5,"angle":-39.6,"curve":0.403,"c3":0.459},{"time":1.0667,"angle":50.18,"curve":0.25,"c3":0.75},{"time":1.1667,"angle":5.48,"curve":0.25,"c3":0.75},{"time":1.3333,"angle":9.08,"curve":0.25,"c3":0.75},{"time":1.5,"angle":6.94}]},"leftArmUp":{"rotate":[{"angle":-7.76,"curve":0.25,"c3":0.576},{"time":0.1333,"angle":-25.39,"curve":0.25,"c3":0.75},{"time":0.5,"angle":-2.9,"curve":0.247,"c3":0.724,"c4":0.89},{"time":1,"angle":-2.11,"curve":0.25,"c3":0.75},{"time":1.2333,"angle":42.07,"curve":0.25,"c3":0.75},{"time":1.5,"angle":61.93}]},"rightArmUp":{"rotate":[{"angle":-15.35,"curve":0.25,"c3":0.75},{"time":0.1667,"angle":-18.39,"curve":0.25,"c3":0.75},{"time":0.8,"angle":-20.65},{"time":1.1,"angle":-17.43},{"time":1.5,"angle":-18.33}]},"leftArmDown":{"rotate":[{"angle":6.61,"curve":0.25,"c3":0.576},{"time":0.1333,"angle":-12.84,"curve":0.25,"c3":0.75},{"time":0.6,"angle":-1.82,"curve":0.25,"c3":0.75},{"time":1.0333,"angle":-15.59,"curve":0.25,"c3":0.75},{"time":1.2333,"angle":-7.78,"curve":0.25,"c3":0.75},{"time":1.5,"angle":12.09}]},"rightArmDown":{"rotate":[{"angle":-20.24,"curve":0.25,"c3":0.75},{"time":0.3,"angle":46.03,"curve":0.25,"c3":0.75},{"time":0.9,"angle":-14.07,"curve":0.25,"c3":0.75},{"time":1.1,"angle":-8.72,"curve":0.25,"c3":0.367},{"time":1.5,"angle":7.54}]},"leftDress":{"rotate":[{},{"time":0.7333,"angle":-20.68},{"time":0.8667,"angle":-9.03},{"time":1.1,"angle":-22.94},{"time":1.5,"angle":15.71}]},"rightDress":{"rotate":[{},{"time":0.2,"angle":-1.76},{"time":0.4,"angle":-22.32},{"time":0.7333,"angle":-8.7},{"time":1.0333,"angle":-20.16},{"time":1.2,"angle":3.92},{"time":1.5,"angle":-7.87}]},"body7":{"translate":[{"time":1.0333,"curve":0.25,"c3":0.227},{"time":1.5,"x":4.32,"y":-10.15}]},"weapon":{"rotate":[{"angle":11.43,"curve":0.25,"c3":0.75},{"time":0.0333,"angle":-9.56,"curve":0.25,"c3":0.75},{"time":0.2,"angle":27.17,"curve":0.244,"c3":0.642,"c4":0.58},{"time":0.8333,"angle":-19.95,"curve":0.382,"c2":0.56,"c3":0.739},{"time":1.0333,"angle":13.23,"curve":0.25,"c3":0.75},{"time":1.2667,"angle":31.18,"curve":0.25,"c3":0.75},{"time":1.5,"angle":16.08}]},"hair4":{"rotate":[{"curve":0.25,"c3":0.75},{"time":0.1667,"angle":42.74,"curve":0.25,"c3":0.75},{"time":0.6333,"angle":12.13,"curve":0.25,"c3":0.75},{"time":1.0667,"angle":48.1,"curve":0.25,"c3":0.75},{"time":1.2,"angle":-20.2,"curve":0.25,"c3":0.75},{"time":1.5,"angle":3.27}]},"hair6":{"rotate":[{"curve":0.25,"c3":0.75},{"time":0.2667,"angle":42.74,"curve":0.25,"c3":0.75},{"time":0.7333,"angle":-31.66,"curve":0.25,"c3":0.75},{"time":1.1667,"angle":1.55,"curve":0.25,"c3":0.75},{"time":1.3,"angle":-20.2,"curve":0.25,"c3":0.75},{"time":1.5,"angle":3.27}]},"hair5":{"rotate":[{"curve":0.25,"c3":0.75},{"time":0.2333,"angle":42.74,"curve":0.25,"c3":0.75},{"time":0.6667,"angle":-3.26,"curve":0.25,"c3":0.75},{"time":1.1333,"angle":48.1,"curve":0.25,"c3":0.75},{"time":1.2667,"angle":-20.2,"curve":0.25,"c3":0.75},{"time":1.5,"angle":3.27}]}},"ik":{"leftFoot_k":[{"mix":0,"bendPositive":false}],"rightFoot_k":[{"mix":0,"bendPositive":false}]}},"fall":{"bones":{"body":{"rotate":[{"angle":-17.48,"curve":0.382,"c2":0.58,"c3":0.731},{"time":0.1,"angle":-17.29,"curve":0.25,"c3":0.75},{"time":0.4333,"angle":-18.07,"curve":0.243,"c3":0.655,"c4":0.63},{"time":0.6667,"angle":-17.48}],"translate":[{"curve":0.25,"c3":0.75},{"time":0.3333,"y":-3.88,"curve":0.25,"c3":0.75},{"time":0.6667}]},"leftArmUp":{"rotate":[{"angle":-231.43,"curve":0.25,"c3":0.75},{"time":0.3333,"angle":-243.06,"curve":0.25,"c3":0.75},{"time":0.6667,"angle":-231.43}],"scale":[{"y":-1}]},"rightArmUp":{"rotate":[{"angle":70.49,"curve":0.25,"c3":0.75},{"time":0.3333,"angle":97.81,"curve":0.25,"c3":0.75},{"time":0.6667,"angle":70.49}],"scale":[{"y":-1}]},"leftLegUp":{"rotate":[{"angle":18.46,"curve":0.375,"c2":0.62,"c3":0.716},{"time":0.0667,"angle":18.35,"curve":0.25,"c3":0.75},{"time":0.4,"angle":19.22,"curve":0.243,"c3":0.68,"c4":0.71},{"time":0.6667,"angle":18.46}],"translate":[{"x":0.26,"y":-0.13,"curve":0.375,"c2":0.62,"c3":0.716},{"time":0.0667,"curve":0.25,"c3":0.75},{"time":0.4,"x":2,"y":-1,"curve":0.243,"c3":0.68,"c4":0.71},{"time":0.6667,"x":0.26,"y":-0.13}]},"rightLegDown":{"rotate":[{"angle":-30.49,"curve":0.25,"c3":0.75},{"time":0.3333,"angle":-9.07,"curve":0.25,"c3":0.75},{"time":0.6667,"angle":-30.49}]},"rightLegUp":{"rotate":[{"angle":30.63,"curve":0.25,"c3":0.75},{"time":0.3333,"angle":31.51,"curve":0.25,"c3":0.75},{"time":0.6667,"angle":30.63}],"translate":[{"curve":0.25,"c3":0.75},{"time":0.3333,"x":2,"y":-1,"curve":0.25,"c3":0.75},{"time":0.6667}]},"body7":{"translate":[{"x":9.92,"y":-8.6}]},"rightArmDown":{"rotate":[{"angle":2.37,"curve":0.375,"c2":0.5,"c3":0.75},{"time":0.1667,"angle":13.66,"curve":0.25,"c3":0.75},{"time":0.5,"angle":-8.92,"curve":0.25,"c3":0.625,"c4":0.5},{"time":0.6667,"angle":2.37}]},"leftArmDown":{"rotate":[{"angle":-3.21,"curve":0.375,"c2":0.5,"c3":0.75},{"time":0.1667,"angle":-9.45,"curve":0.25,"c3":0.75},{"time":0.5,"angle":2.92,"curve":0.25,"c3":0.625,"c4":0.5},{"time":0.6667,"angle":-3.21}]},"leftDress":{"rotate":[{"angle":-335.5,"curve":0.25,"c3":0.75},{"time":0.3333,"angle":18.69,"curve":0.25,"c3":0.75},{"time":0.6667,"angle":-335.5}],"translate":[{"x":4.64,"y":-76.35}]},"leftLegDown":{"rotate":[{"angle":-27.71,"curve":0.375,"c2":0.62,"c3":0.716},{"time":0.0667,"angle":-30.49,"curve":0.25,"c3":0.75},{"time":0.4,"angle":-9.07,"curve":0.243,"c3":0.68,"c4":0.71},{"time":0.6667,"angle":-27.71}]},"rightDress":{"rotate":[{"angle":48.43,"curve":0.363,"c2":0.44,"c3":0.755},{"time":0.2,"angle":52.1,"curve":0.25,"c3":0.75},{"time":0.5333,"angle":46.29,"curve":0.258,"c3":0.619,"c4":0.45},{"time":0.6667,"angle":48.43}],"translate":[{"x":66.32,"y":-109.27}]},"rightFoot":{"rotate":[{"curve":0.25,"c3":0.75},{"time":0.3333,"angle":6.68,"curve":0.25,"c3":0.75},{"time":0.6667}]},"chest":{"rotate":[{"angle":-25.32,"curve":0.363,"c2":0.44,"c3":0.755},{"time":0.2,"angle":-24.83,"curve":0.25,"c3":0.75},{"time":0.5333,"angle":-25.61,"curve":0.258,"c3":0.619,"c4":0.45},{"time":0.6667,"angle":-25.32}]},"head":{"rotate":[{"angle":-6.86,"curve":0.25,"c3":0.75},{"time":0.3333,"angle":-10.88,"curve":0.25,"c3":0.75},{"time":0.6667,"angle":-6.86}]},"leftFoot":{"rotate":[{"angle":0.87,"curve":0.375,"c2":0.62,"c3":0.716},{"time":0.0667,"curve":0.25,"c3":0.75},{"time":0.4,"angle":6.68,"curve":0.243,"c3":0.68,"c4":0.71},{"time":0.6667,"angle":0.87}]},"all":{"rotate":[{"angle":88.82}]},"weapon":{"rotate":[{"angle":-133.4}],"scale":[{"y":-1}]},"hair6":{"rotate":[{"angle":-17.76,"curve":0.289,"c2":0.17,"c3":0.755},{"time":0.3,"angle":14.72,"curve":0.25,"c3":0.75},{"time":0.6333,"angle":-19.2,"curve":0.305,"c3":0.64,"c4":0.36},{"time":0.6667,"angle":-17.76}]},"hair4":{"rotate":[{"angle":0.48,"curve":0.375,"c2":0.5,"c3":0.75},{"time":0.1667,"angle":14.72,"curve":0.25,"c3":0.75},{"time":0.5,"angle":-13.75,"curve":0.25,"c3":0.625,"c4":0.5},{"time":0.6667,"angle":0.48}]},"hair5":{"rotate":[{"angle":-10.99,"curve":0.345,"c2":0.37,"c3":0.757},{"time":0.2333,"angle":14.72,"curve":0.25,"c3":0.75},{"time":0.5667,"angle":-19.2,"curve":0.269,"c3":0.618,"c4":0.42},{"time":0.6667,"angle":-10.99}]}},"ik":{"leftFoot_k":[{"mix":0,"bendPositive":false}],"rightFoot_k":[{"mix":0,"bendPositive":false}]}},"idle":{"bones":{"rightArmUp":{"rotate":[{"angle":-0.42,"curve":0.25,"c3":0.75},{"time":0.5,"angle":3.4,"curve":0.25,"c3":0.75},{"time":1,"angle":-0.42}]},"leftArmDown":{"rotate":[{"angle":9.08,"curve":0.372,"c2":0.48,"c3":0.752},{"time":0.2667,"angle":12.29,"curve":0.25,"c3":0.75},{"time":0.7667,"angle":6.4,"curve":0.252,"c3":0.622,"c4":0.48},{"time":1,"angle":9.08}]},"rightArmDown":{"rotate":[{"angle":6.14,"curve":0.25,"c3":0.75},{"time":0.2667,"angle":4.68,"curve":0.25,"c3":0.75},{"time":0.7667,"angle":7.36,"curve":0.252,"c3":0.622,"c4":0.48},{"time":1,"angle":6.14}]},"leftLegUp":{"rotate":[{"curve":0.25,"c3":0.75},{"time":0.5,"angle":0.88,"curve":0.25,"c3":0.75},{"time":1}],"translate":[{"curve":0.25,"c3":0.75},{"time":0.5,"x":2,"y":-1,"curve":0.25,"c3":0.75},{"time":1}]},"body":{"rotate":[{"angle":0.58,"curve":0.375,"c2":0.62,"c3":0.716},{"time":0.1,"angle":0.72,"curve":0.25,"c3":0.75},{"time":0.6,"angle":-0.33,"curve":0.243,"c3":0.68,"c4":0.71},{"time":1,"angle":0.58}],"translate":[{"curve":0.25,"c3":0.75},{"time":0.5,"y":-3.88,"curve":0.25,"c3":0.75},{"time":1}]},"leftLegDown":{"rotate":[{"curve":0.25,"c3":0.75},{"time":0.5,"angle":-3.37,"curve":0.25,"c3":0.75},{"time":1}]},"leftArmUp":{"rotate":[{"angle":-6.76,"curve":0.25,"c3":0.75},{"time":0.5,"angle":-9.17,"curve":0.25,"c3":0.75},{"time":1,"angle":-6.76}]},"rightFoot":{"rotate":[{"curve":0.25,"c3":0.75},{"time":0.5,"angle":2.89,"curve":0.25,"c3":0.75},{"time":1}]},"leftDress":{"rotate":[{"angle":2.33,"curve":0.248,"c3":0.628,"c4":0.52},{"time":0.5,"angle":-0.83,"curve":0.378,"c2":0.52,"c3":0.748},{"time":1,"angle":2.33}]},"body7":{"translate":[{"x":-4.16,"y":-25.32}]},"rightLegUp":{"rotate":[{"curve":0.25,"c3":0.75},{"time":0.5,"angle":0.88,"curve":0.25,"c3":0.75},{"time":1}],"translate":[{"curve":0.25,"c3":0.75},{"time":0.5,"x":2,"y":-1,"curve":0.25,"c3":0.75},{"time":1}]},"rightLegDown":{"rotate":[{"curve":0.25,"c3":0.75},{"time":0.5,"angle":-3.37,"curve":0.25,"c3":0.75},{"time":1}]},"rightDress":{"rotate":[{"angle":-0.83,"curve":0.25,"c3":0.75},{"time":0.5,"angle":2.33,"curve":0.248,"c3":0.628,"c4":0.52},{"time":1,"angle":-0.83}]},"leftFoot":{"rotate":[{"curve":0.25,"c3":0.75},{"time":0.5,"angle":2.89,"curve":0.25,"c3":0.75},{"time":1}]},"head":{"rotate":[{"angle":-1.01,"curve":0.351,"c2":0.4,"c3":0.757},{"time":0.3333,"angle":3.31,"curve":0.25,"c3":0.75},{"time":0.8333,"angle":-2.25,"curve":0.265,"c3":0.618,"c4":0.43},{"time":1,"angle":-1.01}]},"chest":{"rotate":[{"angle":0.24,"curve":0.378,"c2":0.52,"c3":0.748},{"time":0.2333,"angle":0.72,"curve":0.25,"c3":0.75},{"time":0.7333,"angle":-0.33,"curve":0.248,"c3":0.628,"c4":0.52},{"time":1,"angle":0.24}]},"hair6":{"rotate":[{"angle":-0.11,"curve":0.381,"c2":0.55,"c3":0.742},{"time":0.2,"angle":-3.87,"curve":0.25,"c3":0.75},{"time":0.7,"angle":6.37,"curve":0.245,"c3":0.637,"c4":0.56},{"time":1,"angle":-0.11}]},"hair4":{"rotate":[{"angle":1.58,"curve":0.25,"c3":0.75},{"time":0.5,"angle":6.37,"curve":0.25,"c3":0.75},{"time":1,"angle":1.58}]},"hair5":{"rotate":[{"angle":-2.54,"curve":0.375,"c2":0.62,"c3":0.716},{"time":0.1,"angle":-3.87,"curve":0.25,"c3":0.75},{"time":0.6,"angle":6.37,"curve":0.243,"c3":0.68,"c4":0.71},{"time":1,"angle":-2.54}]}}},"walk":{"bones":{"leftLegUp":{"rotate":[{"angle":20.43},{"time":0.0667,"angle":20.91},{"time":0.1667,"angle":5.96},{"time":0.2333,"angle":-1.49},{"time":0.3333,"angle":-6.72},{"time":0.4,"angle":-3.63},{"time":0.5,"angle":18.39},{"time":0.5667,"angle":22.97},{"time":0.6667,"angle":20.43}],"translate":[{"x":0.8,"y":-1.63}],"scale":[{"curve":0.25,"c3":0.75},{"time":0.3333,"x":1.02,"curve":0.25,"c3":0.75},{"time":0.6667}]},"rightLegUp":{"rotate":[{"angle":-16.83},{"time":0.0667,"angle":-18.48,"curve":0.25,"c3":0.75},{"time":0.2333,"angle":10},{"time":0.3333,"angle":15.43},{"time":0.4,"angle":12.38},{"time":0.5,"angle":2.66},{"time":0.5667,"angle":-3.08},{"time":0.6667,"angle":-16.83}],"translate":[{"y":11.54,"curve":0.25,"c3":0.75},{"time":0.3333,"curve":0.25,"c3":0.75},{"time":0.6667,"y":11.54}],"scale":[{"x":1.033,"curve":0.25,"c3":0.75},{"time":0.3333,"x":0.977,"curve":0.25,"c3":0.75},{"time":0.6667,"x":1.033}]},"rightArmUp":{"rotate":[{"angle":2.81,"curve":0.25,"c3":0.75},{"time":0.3333,"angle":-14.62,"curve":0.25,"c3":0.75},{"time":0.6667,"angle":2.81}]},"leftArmUp":{"rotate":[{"angle":-0.47,"curve":0.25,"c3":0.75},{"time":0.3333,"angle":15.11,"curve":0.25,"c3":0.75},{"time":0.6667,"angle":-0.47}]},"head":{"rotate":[{"angle":5.6,"curve":0.25,"c3":0.75},{"time":0.3333,"angle":2.89,"curve":0.25,"c3":0.75},{"time":0.6667,"angle":5.6}]},"rightArmDown":{"rotate":[{"angle":2.56,"curve":0.379,"c2":0.6,"c3":0.724},{"time":0.0667,"angle":10.94,"curve":0.25,"c3":0.75},{"time":0.4,"angle":-7.67,"curve":0.242,"c3":0.667,"c4":0.67},{"time":0.6667,"angle":2.56}]},"body7":{"rotate":[{"angle":-1.39,"curve":0.333,"c2":0.33,"c3":0.758},{"time":0.2333,"angle":4.96,"curve":0.25,"c3":0.75},{"time":0.5667,"angle":-2.82,"curve":0.276,"c3":0.621,"c4":0.4},{"time":0.6667,"angle":-1.39}]},"rightDress":{"rotate":[{"angle":3.65,"curve":0.379,"c2":0.6,"c3":0.724},{"time":0.0333,"angle":3.1,"curve":0.25,"c3":0.75},{"time":0.2,"angle":6.05,"curve":0.242,"c3":0.667,"c4":0.67},{"time":0.3333,"angle":3.65,"curve":0.379,"c2":0.6,"c3":0.724},{"time":0.3667,"angle":3.1,"curve":0.25,"c3":0.75},{"time":0.5333,"angle":6.05,"curve":0.242,"c3":0.667,"c4":0.67},{"time":0.6667,"angle":3.65}]},"body":{"rotate":[{"angle":-8.06,"curve":0.379,"c2":0.6,"c3":0.724},{"time":0.0667,"angle":-8.18,"curve":0.25,"c3":0.75},{"time":0.4,"angle":-7.55,"curve":0.242,"c3":0.667,"c4":0.67},{"time":0.6667,"angle":-8.06}],"translate":[{"curve":0.25,"c3":0.75},{"time":0.3333,"x":-0.01,"y":-1.02,"curve":0.25,"c3":0.75},{"time":0.6667}]},"leftFoot":{"rotate":[{},{"time":0.0667,"angle":-13.71},{"time":0.1667,"angle":-7.37},{"time":0.2333,"angle":-13.98},{"time":0.3333,"angle":-18.2},{"time":0.4,"angle":-25.02},{"time":0.5667,"angle":-25.86},{"time":0.6667}]},"rightLegDown":{"rotate":[{"angle":-12.61},{"time":0.0667,"angle":-20.62},{"time":0.1667,"angle":-47.84},{"time":0.3333,"angle":-17.47},{"time":0.4,"angle":-21.02},{"time":0.5,"angle":-17.87},{"time":0.5667,"angle":-19.21},{"time":0.6667,"angle":-12.61}]},"leftDress":{"rotate":[{"angle":-0.59,"curve":0.345,"c2":0.37,"c3":0.757},{"time":0.1,"angle":-2.82,"curve":0.242,"c3":0.667,"c4":0.67},{"time":0.2333,"angle":-0.42,"curve":0.379,"c2":0.6,"c3":0.724},{"time":0.2667,"angle":0.13,"curve":0.25,"c3":0.75},{"time":0.4333,"angle":-2.82,"curve":0.242,"c3":0.667,"c4":0.67},{"time":0.5667,"angle":-0.42,"curve":0.379,"c2":0.6,"c3":0.724},{"time":0.6,"angle":0.13,"curve":0.269,"c3":0.618,"c4":0.42},{"time":0.6667,"angle":-0.59}]},"leftLegDown":{"rotate":[{"angle":-15.06},{"time":0.0667,"angle":-26.99},{"time":0.1667,"angle":-16.39},{"time":0.2333,"angle":-18.13},{"time":0.3333,"angle":-20.69},{"time":0.4,"angle":-36.31},{"time":0.5,"angle":-65.16},{"time":0.6667,"angle":-15.06}]},"all":{"translate":[{"y":2.33,"curve":0.381,"c2":0.55,"c3":0.742},{"time":0.0667,"y":-5.39,"curve":0.25,"c3":0.75},{"time":0.2333,"y":6.82,"curve":0.25,"c3":0.75},{"time":0.4,"y":-5.39,"curve":0.25,"c3":0.75},{"time":0.5667,"y":6.82,"curve":0.25,"c3":0.75},{"time":0.6667,"y":2.33}]},"rightFoot":{"rotate":[{"angle":-3.26},{"time":0.0667,"angle":-10.08},{"time":0.2333,"angle":-10.92},{"time":0.3333,"angle":8.38},{"time":0.4,"angle":2.27},{"time":0.5,"angle":7.57},{"time":0.6667,"angle":-3.26}]},"leftArmDown":{"rotate":[{"angle":1.68,"curve":0.379,"c2":0.6,"c3":0.724},{"time":0.0667,"angle":-1.24,"curve":0.25,"c3":0.75},{"time":0.4,"angle":10.33,"curve":0.242,"c3":0.667,"c4":0.67},{"time":0.6667,"angle":1.68}]},"hair4":{"rotate":[{"angle":3.97,"curve":0.375,"c2":0.5,"c3":0.75},{"time":0.1667,"angle":6.37,"curve":0.25,"c3":0.75},{"time":0.5,"angle":1.58,"curve":0.25,"c3":0.625,"c4":0.5},{"time":0.6667,"angle":3.97}]},"hair6":{"rotate":[{"angle":-3.44,"curve":0.289,"c2":0.17,"c3":0.755},{"time":0.3,"angle":6.37,"curve":0.25,"c3":0.75},{"time":0.6333,"angle":-3.87,"curve":0.305,"c3":0.64,"c4":0.36},{"time":0.6667,"angle":-3.44}]},"hair5":{"rotate":[{"angle":-1.39,"curve":0.345,"c2":0.37,"c3":0.757},{"time":0.2333,"angle":6.37,"curve":0.25,"c3":0.75},{"time":0.5667,"angle":-3.87,"curve":0.269,"c3":0.618,"c4":0.42},{"time":0.6667,"angle":-1.39}]}},"ik":{"leftFoot_k":[{"mix":0,"bendPositive":false}],"rightFoot_k":[{"mix":0,"bendPositive":false}]}},"yell":{"bones":{"leftArmUp":{"rotate":[{"angle":-107.57,"curve":0.25,"c3":0.75},{"time":0.3333,"angle":-83.4,"curve":0.25,"c3":0.75},{"time":0.6667,"angle":-107.57}],"scale":[{"y":-1}]},"rightArmUp":{"rotate":[{"angle":105.79,"curve":0.25,"c3":0.75},{"time":0.3333,"angle":81.56,"curve":0.25,"c3":0.75},{"time":0.6667,"angle":105.79}],"scale":[{"y":-1}]},"body":{"rotate":[{"angle":0.18,"curve":0.382,"c2":0.58,"c3":0.731},{"time":0.1,"angle":0.37,"curve":0.25,"c3":0.75},{"time":0.4333,"angle":-0.41,"curve":0.243,"c3":0.655,"c4":0.63},{"time":0.6667,"angle":0.18}],"translate":[{"curve":0.25,"c3":0.75},{"time":0.3333,"y":-3.88,"curve":0.25,"c3":0.75},{"time":0.6667}]},"head":{"rotate":[{"angle":17.74,"curve":0.25,"c3":0.75},{"time":0.3333,"angle":13.72,"curve":0.25,"c3":0.75},{"time":0.6667,"angle":17.74}]},"leftLegUp":{"rotate":[{"angle":9.32,"curve":0.25,"c3":0.75},{"time":0.3333,"angle":0.88,"curve":0.25,"c3":0.75},{"time":0.6667}],"translate":[{"curve":0.25,"c3":0.75},{"time":0.3333,"x":2,"y":-1,"curve":0.25,"c3":0.75},{"time":0.6667}]},"chest":{"rotate":[{"angle":-0.12,"curve":0.363,"c2":0.44,"c3":0.755},{"time":0.2,"angle":0.37,"curve":0.25,"c3":0.75},{"time":0.5333,"angle":-0.41,"curve":0.258,"c3":0.619,"c4":0.45},{"time":0.6667,"angle":-0.12}]},"rightLegDown":{"rotate":[{"angle":-20.19,"curve":0.25,"c3":0.75},{"time":0.3333,"angle":-3.37,"curve":0.25,"c3":0.75},{"time":0.6667}]},"rightFoot":{"rotate":[{"curve":0.25,"c3":0.75},{"time":0.3333,"angle":2.89,"curve":0.25,"c3":0.75},{"time":0.6667}]},"body7":{"translate":[{"x":-4.16,"y":-25.32}]},"leftArmDown":{"rotate":[{"angle":32.79,"curve":0.375,"c2":0.5,"c3":0.75},{"time":0.1667,"angle":40.92,"curve":0.25,"c3":0.75},{"time":0.5,"angle":15.07,"curve":0.25,"c3":0.625,"c4":0.5},{"time":0.6667,"angle":32.79}]},"rightArmDown":{"rotate":[{"angle":-23.6,"curve":0.375,"c2":0.5,"c3":0.75},{"time":0.1667,"angle":-32.55,"curve":0.25,"c3":0.75},{"time":0.5,"angle":-23.59,"curve":0.25,"c3":0.625,"c4":0.5},{"time":0.6667,"angle":-23.6}]},"rightLegUp":{"rotate":[{"angle":7.15,"curve":0.25,"c3":0.75},{"time":0.3333,"angle":0.88,"curve":0.25,"c3":0.75},{"time":0.6667}],"translate":[{"curve":0.25,"c3":0.75},{"time":0.3333,"x":2,"y":-1,"curve":0.25,"c3":0.75},{"time":0.6667}]},"leftLegDown":{"rotate":[{"angle":-22.37,"curve":0.25,"c3":0.75},{"time":0.3333,"angle":-3.37,"curve":0.25,"c3":0.75},{"time":0.6667}]},"leftDress":{"rotate":[{"angle":2.33,"curve":0.25,"c3":0.75},{"time":0.3333,"angle":-3.48,"curve":0.25,"c3":0.75},{"time":0.6667,"angle":2.33}]},"rightDress":{"rotate":[{"angle":-1.34,"curve":0.363,"c2":0.44,"c3":0.755},{"time":0.2,"angle":2.33,"curve":0.25,"c3":0.75},{"time":0.5333,"angle":-3.48,"curve":0.258,"c3":0.619,"c4":0.45},{"time":0.6667,"angle":-1.34}]},"leftFoot":{"rotate":[{"curve":0.25,"c3":0.75},{"time":0.3333,"angle":2.89,"curve":0.25,"c3":0.75},{"time":0.6667}]},"weapon":{"rotate":[{"angle":-75.85}]},"all":{"translate":[{"curve":0.25,"c3":0.515},{"time":0.3333,"y":-7.3,"curve":0.25,"c3":0.495},{"time":0.6667}]},"hair6":{"rotate":[{"angle":-3.44,"curve":0.289,"c2":0.17,"c3":0.755},{"time":0.3,"angle":6.37,"curve":0.25,"c3":0.75},{"time":0.6333,"angle":-3.87,"curve":0.305,"c3":0.64,"c4":0.36},{"time":0.6667,"angle":-3.44}]},"hair4":{"rotate":[{"angle":3.97,"curve":0.375,"c2":0.5,"c3":0.75},{"time":0.1667,"angle":6.37,"curve":0.25,"c3":0.75},{"time":0.5,"angle":1.58,"curve":0.25,"c3":0.625,"c4":0.5},{"time":0.6667,"angle":3.97}]},"hair5":{"rotate":[{"angle":-1.39,"curve":0.345,"c2":0.37,"c3":0.757},{"time":0.2333,"angle":6.37,"curve":0.25,"c3":0.75},{"time":0.5667,"angle":-3.87,"curve":0.269,"c3":0.618,"c4":0.42},{"time":0.6667,"angle":-1.39}]},"mouth":{"scale":[{"curve":0.4,"c3":0.137},{"time":0.4,"x":2.293,"curve":0.586,"c3":0.75},{"time":0.6667}]}}}}},[0]]],0,0,[0],[-1],[15]],[[{"name":"character/03","rect":{"x":252,"y":500,"width":168,"height":506},"offset":{"x":2,"y":-13},"originalSize":{"width":650,"height":650},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[1],[0]],[[{"name":"character/05","rect":{"x":2,"y":1544,"width":178,"height":502},"offset":{"x":4,"y":-14},"originalSize":{"width":650,"height":650},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[1],[0]],[[{"name":"character/07","rect":{"x":2,"y":1032,"width":178,"height":510},"offset":{"x":2,"y":-13},"originalSize":{"width":650,"height":650},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[1],[0]],[[{"name":"character/08","rect":{"x":2,"y":2,"width":176,"height":514},"offset":{"x":-9,"y":-15},"originalSize":{"width":650,"height":650},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[1],[0]],[[{"name":"character/04","rect":{"x":182,"y":1032,"width":158,"height":508},"offset":{"x":0,"y":-9},"originalSize":{"width":650,"height":650},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[1],[0]],[[{"name":"character/02","rect":{"x":180,"y":2,"width":234,"height":496},"offset":{"x":3,"y":-12},"originalSize":{"width":650,"height":650},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[1],[0]],[[{"name":"character/01","rect":{"x":2,"y":518,"width":248,"height":512},"offset":{"x":17,"y":-15},"originalSize":{"width":650,"height":650},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[1],[0]],[[{"name":"character/06","rect":{"x":182,"y":1542,"width":202,"height":504},"offset":{"x":7,"y":-17},"originalSize":{"width":650,"height":650},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[1],[0]],[[[14,"scene_tutorial"],[15,"gameobjects",512,[-2,-3,-4,-5,-6,-7,-8,-9,-10],[[8,-1]]],[4,"role",512,1,[[0,-11,[5,650,650]],[1,2,false,-12,14],[26,true,-13,[15,16],17],[2,2,true,-14,18],[9,false,-15],[10,-16]],[1,242.515,-98.261,0]],[16,"Canvas",512,33554432,"413H3RD/hM4bdzWvWyxS03",[-21,-22,1],[[22,"Canvas<UITransform>",-17,[5,1280,720]],[28,"Canvas<Canvas>",-19,-18],[29,45,1280,720,-20]],[1,640,360,0]],[17,"light_point",1,[-27],[[0,-23,[5,1800,1800]],[30,2,2,4,900,314,4,887,1,382,13.4,-24,12],[9,false,-25],[31,60,-26,2]],[1,720.032,177.711,0]],[18,"LightSystemKeep",512,"7clpsZ2k9LF6qis5csfBK9",[-28,-29,-30,-31,-32]],[6,"man_et",1,[[23,-33,[5,320.19000244140625,867.1900024414062],[0,0.466597934842841,0.011208616611889]],[32,"default","walk",false,0,-34,9],[2,2,true,-35,10],[10,-36]],[1,-50.89,-361.961,0],[1,0.5,0.5,1]],[19,"woodbox",1,[[8,-37],[33,0,true,-38,[[[0,-49.609375,50],[0,-50,-49.609375],[0,50,-49.609375],[0,50,49.609375]],8,8,8,8]],[34,-39],[24,0,-40,13]],[1,1348.841,-328.389,0]],[35,1,29,540,4000,1073741824,[4,4278190080]],[6,"background",1,[[0,-41,[5,6350.643,1080]],[25,2,0,false,-42,0],[27,-43]],[1,1624.679,172.271,-1006.935],[1,1.4,1.4,1]],[3,"foreground_01",512,1,[[0,-44,[5,1920,1080]],[1,2,false,-45,1],[2,2,true,-46,2]]],[4,"foreground_02",512,1,[[0,-47,[5,1920,1080]],[1,2,false,-48,3],[2,2,true,-49,4]],[1,1920,0,0]],[4,"foreground_03",512,1,[[0,-50,[5,1920,1080]],[1,2,false,-51,5],[2,2,true,-52,6]],[1,3840,0,0]],[4,"foreground_04",512,1,[[0,-53,[5,1920,1080]],[1,2,false,-54,7],[2,2,true,-55,8]],[1,-1920,0,0]],[39,"scene_tutorial",[3,5],[40,null,null,"50d8585d-6e58-4e73-8143-284b17101ae5",null,null,[]],[41,[42,0.78125,[2,0.2,0.5019607843137255,0.8,0.520833125],[2,0.2,0.5019607843137255,0.8,0.520833125]],[43,[0,512,512]],[44],[45,[4,4292993505]],[46],[47],[48],[49]]],[20,"Camera_GAME",3,[[8,[50,false,-56,2]],1,4],[1,0,0,1960]],[3,"gizmo_light",512,4,[[0,-57,[5,80,80]],[1,0,false,-58,11]]],[7,"Light2DAmbientShadowCamera",512,5,[[-59,[51,-60,8]],1,4],[1,640,360,1000]],[7,"Light2DShadowCamera",512,5,[[-61,[52,-62,8]],1,4],[1,640,360,0]],[21,"Camera_UI",512,3,[-63],[1,0,0,1000]],[36,0,2,379.0835579514825,2000,0,311427072,19,[4,4294967295]],[3,"Lighting2DSystem",512,5,[[53,0.38,148.6,true,false,true,-66,[4,2684354560],-65,8,-64,19,20]]],[37,0,507,0,2000,2,17,[4,4294967295]],[38,"Camera<CameraComponent>",0,507,0,2000,1,18,[4,4278190080]],[3,"Light2DShadow",512,5,[[54,-67,21]]],[3,"Light2dAmbientShadow",512,5,[[55,-68,22]]]],0,[0,0,1,0,-1,9,0,-2,10,0,-3,11,0,-4,12,0,-5,13,0,-6,6,0,-7,4,0,-8,2,0,-9,7,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,3,0,7,20,0,0,3,0,0,3,0,-1,19,0,-2,15,0,0,4,0,0,4,0,0,4,0,0,4,0,-1,16,0,-1,21,0,-2,24,0,-3,18,0,-4,25,0,-5,17,0,0,6,0,0,6,0,0,6,0,0,6,0,0,7,0,0,7,0,0,7,0,0,7,0,0,9,0,0,9,0,0,9,0,0,10,0,0,10,0,0,10,0,0,11,0,0,11,0,0,11,0,0,12,0,0,12,0,0,12,0,0,13,0,0,13,0,0,13,0,0,15,0,0,16,0,0,16,0,-1,22,0,0,17,0,-1,23,0,0,18,0,-1,20,0,8,23,0,9,22,0,0,21,0,0,24,0,0,25,0,10,14,1,4,3,3,4,14,5,4,14,8,0,15,68],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[2,2,3,2,3,2,3,2,3,11,3,2,12,2,2,-1,-2,13,3,14,15,5,5],[16,1,2,3,4,1,2,3,4,17,18,19,20,21,22,5,23,5,24,25,26,27,28]],[[{"fmt":"0","w":0,"h":0},-1],[1],0,[],[],[]],[[{"base":"2,2,2,2,0,0","mipmaps":["8d0emafflFMofyEeARo+tT"]}],[2],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[1],0,[],[],[]],[[{"base":"2,2,2,2,0,0","mipmaps":["a7krjwJL9EAKyvej5iLgIE"]}],[2],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[1],0,[],[],[]],[[{"base":"2,2,2,2,0,0","mipmaps":["a84xqNloVAJ5jFzp5Bt8iO"]}],[2],0,[],[],[]],[[{"name":"spritesheet_n","rect":{"x":0,"y":0,"width":422,"height":2048},"offset":{"x":0,"y":0},"originalSize":{"width":422,"height":2048},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-211,-1024,0,211,-1024,0,-211,1024,0,211,1024,0],"indexes":[0,1,2,2,1,3],"uv":[0,2048,422,2048,0,0,422,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-211,"y":-1024,"z":0},"maxPos":{"x":211,"y":1024,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[1],[29]],[[[56,"default-physics-material",0.8,0.1,0.1,0.1]],0,0,[],[],[]],[[[11,"light-shadow-mesh",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{}],[[[{},"color",8,[4,4294967295]]],11]]],0,0,[0],[6],[30]],[[[12,"../Light2D/light-receiver",[{}],[{"hash":518248081,"name":"../Light2D/light-receiver|sprite-vs:vert|sprite-fs:frag","blocks":[{"name":"ALPHA_TEST_DATA","stageFlags":16,"binding":0,"members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"]},{"name":"LightUniforms","stageFlags":16,"binding":1,"members":[{"name":"lightPositionsArr","type":16,"count":20},{"name":"lightColorsArr","type":16,"count":20},{"name":"lightParamsArr","type":16,"count":20},{"name":"customTextureIndexArr","type":16,"count":4},{"name":"lightExtraDataArr","type":16,"count":20},{"name":"lightExtraDataArr2","type":16,"count":20},{"name":"lightExtraDataArr3","type":16,"count":20},{"name":"customArr","type":16,"count":64},{"name":"shadowMaskArea","type":16,"count":1},{"name":"shadowMaskOffset","type":16,"count":1},{"name":"ambientColor","type":16,"count":1},{"name":"ambientShadowMaskArea","type":16,"count":1},{"name":"ambientShadowOnOff","type":13,"count":1},{"name":"ambientIntensity","type":13,"count":1},{"name":"ambientOnOffResult","type":13,"count":1},{"name":"useNormalMap","type":13,"count":1},{"name":"lightCount","type":13,"count":1},{"name":"lightOnOff","type":13,"count":1},{"name":"shadowOnOff","type":13,"count":1},{"name":"inEditMode","type":13,"count":1},{"name":"customPolygonCount","type":13,"count":1},{"name":"useAlphaHeight","type":13,"count":1},{"name":"baseHeight","type":13,"count":1},{"name":"heightScale","type":13,"count":1},{"name":"scaleX","type":13,"count":1},{"name":"scaleY","type":13,"count":1}],"defines":[]}],"samplerTextures":[{"name":"shadowMap","type":28,"count":1,"stageFlags":16,"sampleType":0,"binding":2,"defines":[]},{"name":"normalMap","type":28,"count":1,"stageFlags":16,"sampleType":0,"binding":3,"defines":[]},{"name":"spriteLightTexture","type":28,"count":1,"stageFlags":16,"sampleType":0,"binding":4,"defines":[]},{"name":"ambientShadowMap","type":28,"count":1,"stageFlags":16,"sampleType":0,"binding":5,"defines":[]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_texCoord","format":21,"location":1,"defines":[]},{"name":"a_color","format":44,"location":2,"defines":[]},{"name":"a_color2","format":44,"location":3,"defines":["TWO_COLORED"]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"descriptors":[{"rate":0,"blocks":[{"name":"CCLocal","stageFlags":1,"tags":{"builtin":"local"},"members":[{"name":"cc_matWorld","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matWorldIT","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_lightingMapUVParam","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_localShadowBias","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeData1","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeData2","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeBlendData1","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeBlendData2","typename":"vec4","type":16,"count":1,"precision":"highp "}],"defines":["USE_LOCAL"]}],"samplerTextures":[{"name":"cc_spriteTexture","typename":"sampler2D","type":28,"count":1,"stageFlags":16,"sampleType":0,"tags":{"builtin":"local"},"defines":[]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":1,"blocks":[{"name":"ALPHA_TEST_DATA","stageFlags":16,"binding":0,"members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"]},{"name":"LightUniforms","stageFlags":16,"binding":1,"members":[{"name":"lightPositionsArr","type":16,"count":20},{"name":"lightColorsArr","type":16,"count":20},{"name":"lightParamsArr","type":16,"count":20},{"name":"customTextureIndexArr","type":16,"count":4},{"name":"lightExtraDataArr","type":16,"count":20},{"name":"lightExtraDataArr2","type":16,"count":20},{"name":"lightExtraDataArr3","type":16,"count":20},{"name":"customArr","type":16,"count":64},{"name":"shadowMaskArea","type":16,"count":1},{"name":"shadowMaskOffset","type":16,"count":1},{"name":"ambientColor","type":16,"count":1},{"name":"ambientShadowMaskArea","type":16,"count":1},{"name":"ambientShadowOnOff","type":13,"count":1},{"name":"ambientIntensity","type":13,"count":1},{"name":"ambientOnOffResult","type":13,"count":1},{"name":"useNormalMap","type":13,"count":1},{"name":"lightCount","type":13,"count":1},{"name":"lightOnOff","type":13,"count":1},{"name":"shadowOnOff","type":13,"count":1},{"name":"inEditMode","type":13,"count":1},{"name":"customPolygonCount","type":13,"count":1},{"name":"useAlphaHeight","type":13,"count":1},{"name":"baseHeight","type":13,"count":1},{"name":"heightScale","type":13,"count":1},{"name":"scaleX","type":13,"count":1},{"name":"scaleY","type":13,"count":1}],"defines":[]}],"samplerTextures":[{"name":"shadowMap","type":28,"count":1,"stageFlags":16,"sampleType":0,"binding":2,"defines":[]},{"name":"normalMap","type":28,"count":1,"stageFlags":16,"sampleType":0,"binding":3,"defines":[]},{"name":"spriteLightTexture","type":28,"count":1,"stageFlags":16,"sampleType":0,"binding":4,"defines":[]},{"name":"ambientShadowMap","type":28,"count":1,"stageFlags":16,"sampleType":0,"binding":5,"defines":[]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":2,"blocks":[],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":3,"blocks":[{"name":"CCGlobal","stageFlags":17,"tags":{"builtin":"global"},"members":[{"name":"cc_time","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_screenSize","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_nativeSize","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_probeInfo","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_debug_view_mode","typename":"vec4","type":16,"count":1,"precision":"mediump "}],"defines":[]},{"name":"CCCamera","stageFlags":17,"tags":{"builtin":"global"},"members":[{"name":"cc_matView","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matProj","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matProjInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewProj","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewProjInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_cameraPos","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_surfaceTransform","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_screenScale","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_exposure","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_mainLitDir","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_mainLitColor","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_ambientSky","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_ambientGround","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogColor","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogBase","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogAdd","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_nearFar","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_viewPort","typename":"vec4","type":16,"count":1,"precision":"mediump "}],"defines":[]}],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]}],"glsl3":{"vert":"\nprecision highp float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n  mediump vec4 cc_probeInfo;\n  mediump vec4 cc_debug_view_mode;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_surfaceTransform;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\n#if USE_LOCAL\n  layout(std140) uniform CCLocal {\n    highp mat4 cc_matWorld;\n    highp mat4 cc_matWorldIT;\n    highp vec4 cc_lightingMapUVParam;\n    highp vec4 cc_localShadowBias;\n    highp vec4 cc_reflectionProbeData1;\n    highp vec4 cc_reflectionProbeData2;\n    highp vec4 cc_reflectionProbeBlendData1;\n    highp vec4 cc_reflectionProbeBlendData2;\n  };\n#endif\n#if SAMPLE_FROM_RT\n  #define QUATER_PI         0.78539816340\n  #define HALF_PI           1.57079632679\n  #define PI                3.14159265359\n  #define PI2               6.28318530718\n  #define PI4               12.5663706144\n  #define INV_QUATER_PI     1.27323954474\n  #define INV_HALF_PI       0.63661977237\n  #define INV_PI            0.31830988618\n  #define INV_PI2           0.15915494309\n  #define INV_PI4           0.07957747155\n  #define EPSILON           1e-6\n  #define EPSILON_LOWP      1e-4\n  #define LOG2              1.442695\n  #define EXP_VALUE         2.71828183\n  #define FP_MAX            65504.0\n  #define FP_SCALE          0.0009765625\n  #define FP_SCALE_INV      1024.0\n  #define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n      #define LIGHT_MAP_TYPE_DISABLED 0\n  #define LIGHT_MAP_TYPE_ALL_IN_ONE 1\n  #define LIGHT_MAP_TYPE_INDIRECT_OCCLUSION 2\n  #define REFLECTION_PROBE_TYPE_NONE 0\n  #define REFLECTION_PROBE_TYPE_CUBE 1\n  #define REFLECTION_PROBE_TYPE_PLANAR 2\n  #define REFLECTION_PROBE_TYPE_BLEND 3\n  #define REFLECTION_PROBE_TYPE_BLEND_AND_SKYBOX 4\n      #define LIGHT_TYPE_DIRECTIONAL 0.0\n  #define LIGHT_TYPE_SPHERE 1.0\n  #define LIGHT_TYPE_SPOT 2.0\n  #define LIGHT_TYPE_POINT 3.0\n  #define LIGHT_TYPE_RANGED_DIRECTIONAL 4.0\n  #define IS_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_DIRECTIONAL)) < EPSILON_LOWP)\n  #define IS_SPHERE_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPHERE)) < EPSILON_LOWP)\n  #define IS_SPOT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPOT)) < EPSILON_LOWP)\n  #define IS_POINT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_POINT)) < EPSILON_LOWP)\n  #define IS_RANGED_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_RANGED_DIRECTIONAL)) < EPSILON_LOWP)\n  #define TONE_MAPPING_ACES 0\n  #define TONE_MAPPING_LINEAR 1\n  #define SURFACES_MAX_TRANSMIT_DEPTH_VALUE 999999.0\n  #ifndef CC_SURFACES_DEBUG_VIEW_SINGLE\n    #define CC_SURFACES_DEBUG_VIEW_SINGLE 1\n  #endif\n  #ifndef CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC\n    #define CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC 2\n  #endif\n#endif\nin vec3 a_position;\nin vec2 a_texCoord;\nin vec4 a_color;\n#if TWO_COLORED\n  in vec4 a_color2;\n#endif\nout vec4 v_color;\n#if TWO_COLORED\n  out vec4 v_dark;\n#endif\nout vec4 color;\nout vec2 uv0;\nout vec3 worldPos;\nvec4 vert () {\n  vec4 pos = vec4(a_position, 1);\n  #if USE_LOCAL\n    worldPos = (cc_matWorld * pos).xyz;\n    pos = cc_matWorld * pos;\n  #else\n    worldPos = a_position;\n  #endif\n  #if USE_PIXEL_ALIGNMENT\n    pos = cc_matView * pos;\n    pos.xyz = floor(pos.xyz);\n    pos = cc_matProj * pos;\n  #else\n    pos = cc_matViewProj * pos;\n  #endif\n  uv0 = a_texCoord;\n  #if SAMPLE_FROM_RT\n    uv0 = cc_cameraPos.w > 1.0 ? vec2(uv0.x, 1.0 - uv0.y) : uv0;\n  #endif\n  color = a_color;\n #if TWO_COLORED\n    v_dark = a_color2;\n  #endif\n  return pos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\n  precision highp float;\n  vec4 CCSampleWithAlphaSeparated(sampler2D tex, vec2 uv) {\n  #if CC_USE_EMBEDDED_ALPHA\n    return vec4(texture(tex, uv).rgb, texture(tex, uv + vec2(0.0, 0.5)).r);\n  #else\n    return texture(tex, uv);\n  #endif\n  }\n  #if USE_ALPHA_TEST\n    layout(std140) uniform ALPHA_TEST_DATA {\n      float alphaThreshold;\n    };\n  #endif\n  void ALPHA_TEST (in vec4 color) {\n    #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n    #endif\n  }\n  void ALPHA_TEST (in float alpha) {\n    #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n    #endif\n  }\n  layout(std140) uniform CCGlobal {\n    highp   vec4 cc_time;\n    mediump vec4 cc_screenSize;\n    mediump vec4 cc_nativeSize;\n    mediump vec4 cc_probeInfo;\n    mediump vec4 cc_debug_view_mode;\n  };\n  layout(std140) uniform CCCamera {\n    highp   mat4 cc_matView;\n    highp   mat4 cc_matViewInv;\n    highp   mat4 cc_matProj;\n    highp   mat4 cc_matProjInv;\n    highp   mat4 cc_matViewProj;\n    highp   mat4 cc_matViewProjInv;\n    highp   vec4 cc_cameraPos;\n    mediump vec4 cc_surfaceTransform;\n    mediump vec4 cc_screenScale;\n    mediump vec4 cc_exposure;\n    mediump vec4 cc_mainLitDir;\n    mediump vec4 cc_mainLitColor;\n    mediump vec4 cc_ambientSky;\n    mediump vec4 cc_ambientGround;\n    mediump vec4 cc_fogColor;\n    mediump vec4 cc_fogBase;\n    mediump vec4 cc_fogAdd;\n    mediump vec4 cc_nearFar;\n    mediump vec4 cc_viewPort;\n  };\n  in vec4 color;\n  in vec3 worldPos;\n  in vec2 uv0;\n  #if TWO_COLORED\n    in vec4 v_dark;\n  #endif\n  const float PI2 = 6.2831853;\n  const float PI = 3.1415926;\n  const float PIHALF = 1.5707963;\n  uniform sampler2D shadowMap;\n  uniform sampler2D normalMap;\n  uniform sampler2D spriteLightTexture;\n  uniform sampler2D ambientShadowMap;\n  layout(std140) uniform LightUniforms {\n    vec4  lightPositionsArr[20];\n    vec4  lightColorsArr[20];\n    vec4  lightParamsArr[20];\n    vec4  customTextureIndexArr[16/4];\n    vec4  lightExtraDataArr[20];\n    vec4  lightExtraDataArr2[20];\n    vec4  lightExtraDataArr3[20];\n    vec4  customArr[64];\n     vec4 shadowMaskArea;\n     vec4 shadowMaskOffset;\n     vec4 ambientColor;\n    vec4 ambientShadowMaskArea;\n    float  ambientShadowOnOff;\n     float ambientIntensity;\n     float ambientOnOffResult;\n     float useNormalMap;\n     float lightCount;\n     float lightOnOff;\n     float  shadowOnOff;\n     float  inEditMode;\n     float customPolygonCount;\n     float useAlphaHeight;\n     float baseHeight;\n     float heightScale;\n     float scaleX;\n     float scaleY;\n  };\n    uniform sampler2D cc_spriteTexture;\n  float intPow10(float base, float fexp) {\n    float t1 = clamp(fexp, 0.0, 10.0);\n    int exponent = int(t1);\n    float powers[11];\n    powers[0] = 1.0;\n    powers[1] = base;\n    float b2 = base * base;\n    powers[2] = b2;\n    float b3 = b2 * base;\n    powers[3] = b3;\n    float b4 = b2 * b2;\n    powers[4] = b4;\n    powers[5] = b4 * base;\n    powers[6] = b4 * b2;\n    powers[7] = b4 * b3;\n    powers[8] = b4 * b4;\n    powers[9] = b4 * b4 * base;\n    powers[10] = b4 * b4 * b2;\n    return powers[exponent];\n  }\nfloat fastSqrt(float x) {\n    if (x <= 0.0) return 0.0;\n    if (x == 1.0) return 1.0;\n    float guess = x * 0.5;\n    guess = 0.5 * (guess + x / guess);\n    guess = 0.5 * (guess + x / guess);\n    guess = 0.5 * (guess + x / guess);\n    guess = 0.5 * (guess + x / guess);\n    guess = 0.5 * (guess + x / guess);\n    guess = 0.5 * (guess + x / guess);\n    return guess;\n}\n  float normalizeRad(float rad) {\n    return mod(mod(rad + PI, PI2) + PI2, PI2) - PI;\n  }\n  bool isAngleRangeRad(float rad, float start, float end) {\n    float r = mod(end - start + PI2, PI2);\n    if (abs(end - start) >= PI2-0.0001) return true;\n    float d = mod(rad - start + PI2, PI2);\n    return d <= r;\n  }\n  float fastAtan2(float y, float x) {\n      if (abs(x) < 1e-8 && abs(y) < 1e-8) return 0.0;\n      if (abs(x) < 1e-8) return y > 0.0 ? 1.570796327 : -1.570796327;\n      float t0, t1, t3, t4;\n      t3 = abs(x);\n      t1 = abs(y);\n      t0 = max(t3, t1);\n      t1 = min(t3, t1);\n      t3 = 1.0 / t0;\n      t3 = t1 * t3;\n      t4 = t3 * t3;\n      t0 = -0.013480470;\n      t0 = t0 * t4 + 0.057477314;\n      t0 = t0 * t4 - 0.121239071;\n      t0 = t0 * t4 + 0.195635925;\n      t0 = t0 * t4 - 0.332994597;\n      t0 = t0 * t4 + 0.999995630;\n      t3 = t0 * t3;\n      if (abs(y) > abs(x)) t3 = 1.570796327 - t3;\n      if (x < 0.0) t3 = 3.141592654 - t3;\n      if (y < 0.0) t3 = -t3;\n      return t3;\n  }\nfloat calculateEffectiveHeight(vec3 normalVec, vec4 normalData) {\n    float effectiveReceiverHeight = baseHeight;\n    if (useAlphaHeight > 0.5) {\n        float alphaHeight = (normalData.a - 0.5) * heightScale;\n        effectiveReceiverHeight = baseHeight + alphaHeight;\n    } else {\n        float surfaceHeightOffset = (normalVec.z - 1.0) * heightScale;\n        effectiveReceiverHeight = baseHeight + surfaceHeightOffset;\n    }\n    return effectiveReceiverHeight;\n}\nfloat calculate3DLighting(vec3 normalVec, vec2 relPx, float effectiveReceiverHeight, float lightHeight) {\n    vec2 tscale = vec2(scaleX>=0.0?1.0:-1.0, scaleY>=0.0?1.0:-1.0);\n    vec3 lightToFrag = vec3(relPx.x*tscale.x, relPx.y*tscale.y, effectiveReceiverHeight - lightHeight);\n    vec3 lightDir = normalize(-lightToFrag);\n    return max(0.0, dot(normalize(normalVec), lightDir));\n}\n  vec3 calculatePointLight(\n      vec3 normalVec,\n      vec4 normalData,\n      vec3 baseColor,\n      vec3 fragWorldPos,\n      vec4 lightPosData,\n      vec4 lightColorData,\n      vec4 lightParamData,\n      vec4 lightExtraData,\n      vec4 lightExtraData2,\n      vec4 lightExtraData3\n  ) {\n      vec3 lightWorldPos = lightPosData.xyz;\n      vec3 lightColor = lightColorData.rgb;\n      float intensity = lightParamData.x;\n      float blendMode = lightParamData.y;\n      float falloff = lightExtraData.w;\n      float innerRadius = lightExtraData.x;\n      float innerAngleStart = lightExtraData.y;\n      float innerAngleEnd = lightExtraData.z;\n      float outerAngleStart = lightExtraData2.x;\n      float outerAngleEnd = lightExtraData2.y;\n      float outerRadius = lightExtraData2.z;\n      vec2 relPxOri = fragWorldPos.xy - lightWorldPos.xy;\n      float distPx = dot(relPxOri, relPxOri);\n      if (distPx > outerRadius * outerRadius) {\n        return vec3(0.0);\n      }\n      float cosA = lightExtraData3.x;\n      float sinA = lightExtraData3.y;\n      vec2 relPx = vec2(\n        dot(relPxOri, vec2(cosA, -sinA)),\n        dot(relPxOri, vec2(sinA, cosA))\n      );\n      float t = 1.0;\n      if (distPx > innerRadius * innerRadius) {\n        float dis = sqrt(distPx);\n        t = 1.0 - smoothstep(innerRadius, outerRadius, dis);\n        t = intPow10(t, falloff);\n      }\n      float angle = fastAtan2(relPx.y,relPx.x);\n      float rad = angle;\n      rad = normalizeRad(rad);\n      float aInnerStart = innerAngleStart;\n      float aInnerEnd = innerAngleEnd;\n      float aOuterStart = outerAngleStart;\n      float aOuterEnd =outerAngleEnd;\n      if(!isAngleRangeRad(rad, aOuterStart, aOuterEnd)) {\n        return vec3(0.0);\n      }\n      float angleAtten = 0.0;\n      float totalAngle = abs(aOuterEnd - aOuterStart);\n      if (totalAngle >= PI2) {\n        angleAtten = 1.0;\n      } else if (isAngleRangeRad(rad, aInnerStart, aInnerEnd)) {\n        angleAtten = 1.0;\n      } else if (isAngleRangeRad(rad, aOuterStart, aInnerStart)) {\n        float edgeLen = mod(aInnerStart - aOuterStart + PI2, PI2);\n        float s = mod(rad - aOuterStart + PI2, PI2) / edgeLen;\n        angleAtten = intPow10(s, falloff);\n      } else if (isAngleRangeRad(rad, aInnerEnd, aOuterEnd)) {\n        float edgeLen = mod(aOuterEnd - aInnerEnd + PI2, PI2);\n        float s = mod(aOuterEnd - rad + PI2, PI2) / edgeLen;\n        angleAtten = intPow10(s, falloff);\n      } else {\n        angleAtten = 0.0;\n      }\n      float attenuation = t * angleAtten;\n      if (attenuation <= 0.001) {\n        return vec3(0.0);\n      };\n    if(useNormalMap<0.5){\n      return baseColor * lightColor * attenuation * intensity;\n    }\n    float lightHeight = lightParamData.w;\n    float effectiveReceiverHeight = calculateEffectiveHeight(normalVec, normalData);\n    float diffuse = calculate3DLighting(normalVec, relPxOri, effectiveReceiverHeight, lightHeight);\n    return baseColor*lightColor * attenuation * diffuse * intensity;\n  }\n  float sdPolygon(vec2 p, float radius, float sides) {\n    float sideCount = max(3.0, floor(sides + 0.5));\n    float angleStep = PI2 / sideCount;\n    float a= fastAtan2(p.y, p.x) + PI;\n    float r = length(p);\n    float segmentAngle = floor((a + angleStep * 0.5) / angleStep) * angleStep;\n    float distToEdge = r * cos(segmentAngle - a) - radius * cos(angleStep * 0.5);\n    float distToVertex = r - radius;\n    return max(distToEdge, distToVertex);\n  }\n  vec3 calculateParametricRegularPolygon(vec3 normalVec,vec4 normalData, vec3 baseColor, vec3 fragWorldPos, vec4 lightPosData, vec4 lightColorData, vec4 lightParamData, vec4 lightExtraData,vec4 lightExtraData2) {\n    vec3 lightPos = lightPosData.xyz;\n    vec3 lightColor = lightColorData.rgb;\n    float intensity = lightParamData.x;\n    float radius = max(0.1, lightExtraData.x);\n    float sides = max(3.0, lightExtraData.y);\n    float falloffRange = lightExtraData2.y;\n    float  falloffExponent = lightExtraData2.x;\n    vec2 relativePos = fragWorldPos.xy - lightPos.xy;\n    float cosA = lightExtraData.z;\n    float sinA = lightExtraData.w;\n    vec2 rel = vec2(\n      dot(relativePos, vec2(cosA, -sinA)),\n      dot(relativePos, vec2(sinA, cosA))\n    );\n    float dist = length(rel);\n    float attenuationDistance =  falloffRange;\n    if (dist > (radius + attenuationDistance)) return vec3(0.0);\n    float sdDist = sdPolygon(rel, radius, sides);\n    float attenuation = 0.0;\n    if (sdDist <= 0.0) {\n      attenuation = intensity;\n    } else if (sdDist < attenuationDistance) {\n      float normalizedDist = sdDist / attenuationDistance;\n      float t = intPow10(1.0 - normalizedDist, falloffExponent);\n      attenuation = intensity * clamp(t, 0.0, 1.0);\n    }\n    if(useNormalMap<0.5){\n      return baseColor * lightColor * attenuation ;\n    }\n    float lightHeight = lightParamData.w;\n    float effectiveReceiverHeight = calculateEffectiveHeight(normalVec, normalData);\n    float diffuse = calculate3DLighting(normalVec, relativePos, effectiveReceiverHeight, lightHeight);\n    return baseColor*lightColor * attenuation * diffuse;\n  }\n  float sdBox( vec2 p, vec2 b )\n  {\n    vec2 d = abs(p)-b;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n  }\n  vec3 calculateParametricRectangleLight(vec3 normalVec,vec4 normalData, vec3 baseColor, vec3 fragWorldPos, vec4 lightPosData, vec4 lightColorData, vec4 lightParamData, vec4 lightExtraData,vec4 lightExtraData2) {\n      vec3 lightPos = lightPosData.xyz;\n      vec3 lightColor = lightColorData.rgb;\n      float intensity = lightParamData.x;\n      float width = max(0.1, lightExtraData.x);\n      float height = max(0.1, lightExtraData.y);\n      float falloffRange = lightExtraData2.y;\n      float falloffExponent = lightExtraData2.x;\n      vec2 halfSize = vec2(width * 0.5, height * 0.5);\n      vec2 relativePos = fragWorldPos.xy - lightPos.xy;\n      float cosA = lightExtraData.z;\n      float sinA = lightExtraData.w;\n      vec2 rel = vec2(\n          dot(relativePos, vec2(cosA, -sinA)),\n          dot(relativePos, vec2(sinA, cosA))\n      );\n      float attenuationDistance =  falloffRange;\n      float maxDist = length(halfSize) + attenuationDistance;\n      if (length(rel) > maxDist) return vec3(0.0);\n      float sdDist = sdBox(rel, halfSize);\n      float attenuation = 0.0;\n      if (sdDist <= 0.0) {\n        attenuation = intensity;\n      } else if (sdDist < attenuationDistance) {\n        float normalizedDist = sdDist / attenuationDistance;\n        float t = intPow10(1.0 - normalizedDist,falloffExponent);\n        attenuation = intensity * clamp(t, 0.0, 1.0);\n      }\n    if(useNormalMap<0.5){\n      return baseColor * lightColor * attenuation ;\n    }\n    float lightHeight = lightParamData.w;\n    float effectiveReceiverHeight = calculateEffectiveHeight(normalVec, normalData);\n    float diffuse = calculate3DLighting(normalVec, relativePos, effectiveReceiverHeight, lightHeight);\n      return baseColor * lightColor * attenuation * diffuse;\n  }\n  vec3 calculateParametricCircleLight(vec3 normalVec,vec4 normalData, vec3 baseColor, vec3 fragWorldPos, vec4 lightPosData, vec4 lightColorData, vec4 lightParamData, vec4 lightExtraData,vec4 lightExtraData2) {\n      vec3 lightPos = lightPosData.xyz;\n      vec3 lightColor = lightColorData.rgb;\n      float intensity = lightParamData.x;\n      float radius = max(0.1, lightExtraData.x);\n      float falloffRange = lightExtraData2.y;\n      float falloffExponent = lightExtraData2.x;\n      float cosA = lightExtraData.z;\n      float sinA = lightExtraData.w;\n      vec2 relativePos = fragWorldPos.xy - lightPos.xy;\n      vec2 rel = vec2(\n          dot(relativePos, vec2(cosA, -sinA)),\n          dot(relativePos, vec2(sinA, cosA))\n      );\n      float dist = length(rel);\n      float attenuationDistance =  falloffRange;\n      float maxDist = radius + attenuationDistance;\n      if (dist > maxDist) return vec3(0.0);\n      float attenuation = 0.0;\n      if (dist <= radius) {\n        attenuation = intensity;\n      } else if (dist < maxDist) {\n        float normalizedDist = (dist - radius) / attenuationDistance;\n        float t = intPow10(1.0 - normalizedDist, falloffExponent);\n        attenuation = intensity * clamp(t, 0.0, 1.0);\n      }\n    if(useNormalMap<0.5){\n      return baseColor * lightColor * attenuation ;\n    }\n    float lightHeight = lightParamData.w;\n    float effectiveReceiverHeight = calculateEffectiveHeight(normalVec, normalData);\n    float diffuse = calculate3DLighting(normalVec, relativePos, effectiveReceiverHeight, lightHeight);\n      return baseColor * lightColor * attenuation * diffuse;\n  }\nfloat sdOptimizedPolygon(vec2 p, vec4 precomputedData[4], int pointCount) {\n    float minDistSq = 1e20;\n    int windingNumber = 0;\n    int maxIter = min(pointCount, 4);\n    for (int i = 0; i < maxIter; ++i) {\n        vec4 data = precomputedData[i];\n        vec2 a = data.xy;\n        vec2 edgeVec = data.zw;\n        vec2 b = a + edgeVec;\n        vec2 pa = p - a;\n        float edgeLengthSq = dot(edgeVec, edgeVec);\n        if (edgeLengthSq > 0.0) {\n            float h = clamp(dot(pa, edgeVec) / edgeLengthSq, 0.0, 1.0);\n            vec2 closest = pa - edgeVec * h;\n            minDistSq = min(minDistSq, dot(closest, closest));\n        }\n        if (a.y <= p.y) {\n            if (b.y > p.y) {\n                float cross = edgeVec.x * (p.y - a.y) - edgeVec.y * (p.x - a.x);\n                windingNumber += (cross > 0.0) ? 1 : 0;\n            }\n        } else {\n            if (b.y <= p.y) {\n                float cross = edgeVec.x * (p.y - a.y) - edgeVec.y * (p.x - a.x);\n                windingNumber += (cross < 0.0) ? 1 : 0;\n            }\n        }\n    }\n    float minDist = fastSqrt(minDistSq);\n    return (windingNumber & 1) != 0 ? -minDist : minDist;\n}\nvec3 calculateParametricCustomPolygon(vec3 normalVec,vec4 normalData, vec3 baseColor, vec3 fragWorldPos, vec4 lightPosData, vec4 lightColorData, vec4 lightParamData, vec4 extraPackedData, vec4 precomputedPoints[4],vec4 extraData2) {\n    int pointCount = int(extraPackedData.x);\n    float falloffRange = extraPackedData.y;\n    float falloffExponent = extraPackedData.z;\n    if (pointCount < 3) return vec3(0.0);\n    vec3 lightPos = lightPosData.xyz;\n    vec3 lightColor = lightColorData.rgb;\n    float intensity = lightParamData.x;\n    vec2 center = vec2(extraData2.z,extraData2.w);\n    vec2 relativePos = fragWorldPos.xy - lightPos.xy;\n    float cosA = extraData2.x;\n    float sinA = extraData2.y;\n    vec2 fragLocalPos = vec2(\n        dot(relativePos, vec2(cosA, -sinA)),\n        dot(relativePos, vec2(sinA, cosA))\n    );\n    float maxRadius = extraPackedData.w +falloffRange ;\n    vec2 disv = fragLocalPos-center;\n    if ((disv.x*disv.x+disv.y*disv.y) > maxRadius*maxRadius) return vec3(0.0);\n    vec2 checkLocalPos = fragLocalPos;\n    bool quickInside = false;\n    for (int k = 0; k < 4; ++k) {\n      if (k >= pointCount) break;\n      vec2 a = precomputedPoints[k].xy;\n      vec2 b = a + vec2(precomputedPoints[k].z, precomputedPoints[k].w);\n      if (((a.y <= checkLocalPos.y) && (b.y > checkLocalPos.y)) ||\n        ((a.y > checkLocalPos.y) && (b.y <= checkLocalPos.y))) {\n        float crossProduct = (b.x - a.x) * (checkLocalPos.y - a.y) - (b.y - a.y) * (checkLocalPos.x - a.x);\n        if (a.y < b.y) {\n          quickInside = quickInside != (crossProduct > 0.0);\n        } else {\n          quickInside = quickInside != (crossProduct < 0.0);\n        }\n      }\n    }\n    bool isRangeZero = (falloffRange<1.0);\n    float sdDist =  0.0;\n    if(quickInside){\n      sdDist = 0.0;\n    }else{\n      if(isRangeZero){\n        sdDist  = falloffRange + 1.0;\n      }else{\n        sdDist = sdOptimizedPolygon(fragLocalPos, precomputedPoints, pointCount);\n      }\n    }\n    float attenuation= 1.0;\n    if (sdDist <= 0.0) {\n        attenuation = intensity;\n    } else if (sdDist < falloffRange) {\n        float normalizedDist = sdDist / falloffRange;\n        float t= intPow10(1.0 - normalizedDist, falloffExponent);\n        attenuation = intensity * clamp(t, 0.0, 1.0);\n    } else {\n        return vec3(0.0);\n    }\n    if(useNormalMap<0.5){\n      return baseColor * lightColor * attenuation ;\n    }\n    float lightHeight = lightParamData.w;\n    float effectiveReceiverHeight = calculateEffectiveHeight(normalVec, normalData);\n    float diffuse = calculate3DLighting(normalVec, relativePos, effectiveReceiverHeight, lightHeight);\n    return baseColor * lightColor * attenuation * diffuse;\n}\n vec3 calculateSpriteLight(vec3 normalVec, vec4 normalData, vec3 baseColor, vec3 fragWorldPos, vec4 lightPosData, vec4 lightColorData, vec4 lightParamData,vec4 lightExtraData,vec4 lightExtraData2,vec4 lightExtraData3) {\n    vec3 lightPos = lightPosData.xyz;\n    vec3 lightColor = lightColorData.rgb;\n    float intensity = lightParamData.x;\n    float cosA = lightExtraData.x;\n    float sinA = lightExtraData.y;\n    float rangeX = lightExtraData.z;\n    float rangeY = lightExtraData.w;\n    if (rangeX < 0.0001 || rangeY < 0.0001) return vec3(0.0);\n    vec2 relativePos = fragWorldPos.xy - lightPos.xy;\n    float maxRange = max(rangeX, rangeY);\n    if (dot(relativePos, relativePos) > maxRange * maxRange ) return vec3(0.0);\n    vec2 rel = vec2(\n        dot(relativePos, vec2(cosA, -sinA)),\n        dot(relativePos, vec2(sinA, cosA))\n    );\n    vec2 halfSizeSelf = vec2(rangeX * 0.5, rangeY * 0.5) ;\n    if(abs(rel.x) > halfSizeSelf.x || abs(rel.y) > halfSizeSelf.y) return vec3(0.0);\n    vec2 spriteUV = rel*vec2(1.0/rangeX,1.0/rangeY) + 0.5;\n    vec2 uvOrigin = lightExtraData2.xy;\n    vec2 uvSize = lightExtraData2.zw;\n    vec2 atlasUV = uvOrigin + spriteUV * uvSize;\n    vec4 spriteTexColor =texture(spriteLightTexture, atlasUV);\n    if (spriteTexColor.a < 0.001) return vec3(0.0);\n    float attenuation = spriteTexColor.a;\n    vec3 finalLight = spriteTexColor.rgb * lightColor * intensity * attenuation;\n    if(useNormalMap<0.5){\n      return baseColor * finalLight  ;\n    }\n    float lightHeight = lightParamData.w;\n    float effectiveReceiverHeight = calculateEffectiveHeight(normalVec, normalData);\n    float diffuse = calculate3DLighting(normalVec, relativePos, effectiveReceiverHeight, lightHeight);\n    return baseColor * finalLight * diffuse;\n}\n  vec2 getShadowMapUV(vec2 fragWorldPos) {\n    return ((fragWorldPos.xy - shadowMaskOffset.xy) * shadowMaskOffset.zw) / shadowMaskArea.zw;\n  }\n  vec2 getAmbientShadowMapUV(vec2 fragWorldPos) {\n    return ((fragWorldPos.xy - shadowMaskOffset.xy) * shadowMaskOffset.zw) / ambientShadowMaskArea.zw;\n  }\n  float getShadowBit(vec4 shadowMask, float id) {\n      int idx = int(id);\n      int channel = idx / 8;\n      int bit = idx - channel * 8;\n      int mask = int(255.0 *\n          (channel == 0 ? shadowMask.r :\n          channel == 1 ? shadowMask.g :\n          channel == 2 ? shadowMask.b : shadowMask.a));\n      return float((mask >> bit) & 1);\n  }\n  float getNumberFromVec4Array(vec4 arr[16/4], int index) {\n    int idx = index;\n    int arrIdx = idx / 4;\n    int compIdx = idx - arrIdx * 4;\n    vec4 v = arr[arrIdx];\n    float components[4];\n    components[0] = v.x;\n    components[1] = v.y;\n    components[2] = v.z;\n    components[3] = v.w;\n    return components[compIdx];\n  }\n  bool isInLightById(float lightId) {\n      if(shadowOnOff == 0.0) return true;\n      vec2 uv = getShadowMapUV(worldPos.xy);\n      vec4 shadowMask = texture(shadowMap, uv);\n      return getShadowBit(shadowMask, lightId) != 0.0 ;\n  }\n  vec4 frag () {\n      vec4 o = vec4(1, 1, 1, 1);\n        o *= CCSampleWithAlphaSeparated(cc_spriteTexture, uv0);\n      vec4 baseColor = o;\n      #if TWO_COLORED\n        baseColor.a = o.a * color.a;\n        baseColor.rgb = ((o.a - 1.0) * v_dark.a + 1.0 - o.rgb) * v_dark.rgb + o.rgb * color.rgb;\n      #else\n        baseColor = o * color;\n      #endif\n      if(lightOnOff<0.5){\n        ALPHA_TEST(baseColor);\n        return baseColor;\n      }\n      if(ambientShadowOnOff>0.5){\n        vec2 uv = getAmbientShadowMapUV(worldPos.xy);\n        vec4 sc = texture(ambientShadowMap, uv);\n          baseColor.rgb *= sc.rgb;\n      }\n      vec3 normalVec = vec3(0.0, 0.0, 1.0);\n      vec4 normalData = vec4(0.0, 0.0, 1.0, 1.0);\n      if(useNormalMap >0.5) {\n        normalData = texture(normalMap, uv0);\n        normalVec = normalize(normalData.xyz * 2.0 - 1.0);\n      }\n      vec3 dummyColor =  vec3(1.0);\n      vec3 ambientLight = vec3(0.0);\n      vec3 valueLightInflu = vec3(0.0);\n      if(ambientOnOffResult>0.5){\n          ambientLight =  ambientColor.rgb * ambientIntensity;\n      }\n      int customLightIndex = 0;\n      for (int i = 0; i < 20; ++i) {\n        if (float(i) < lightCount) {\n          vec4 posData = lightPositionsArr[i];\n          vec4 colorData = lightColorsArr[i];\n          vec4 paramData = lightParamsArr[i];\n          vec4 extraData = lightExtraDataArr[i];\n          vec4 extraData2 = lightExtraDataArr2[i];\n          vec4 extraData3 = lightExtraDataArr3[i];\n          float lightType = posData.w;\n          float lightId = posData.z;\n          vec3 inputColor =(paramData.y == 0.0?baseColor.rgb:dummyColor);\n          if (lightType < 0.5) {\n            if( isInLightById(lightId)||inEditMode>0.5) {\n              valueLightInflu += calculatePointLight(normalVec,normalData, inputColor, worldPos, posData, colorData, paramData, extraData, extraData2,extraData3);\n            }\n          } else if (lightType > 0.5 && lightType < 1.5) {\n            vec3 lightPos = posData.xyz;\n            float rangeX = extraData.z;\n            float rangeY = extraData.w;\n            vec2 relativePos = worldPos.xy - lightPos.xy;\n            float maxRange = max(rangeX, rangeY);\n            if (dot(relativePos, relativePos) <= maxRange * maxRange) {\n                valueLightInflu += calculateSpriteLight(normalVec,normalData, inputColor, worldPos, posData, colorData, paramData, extraData, extraData2,extraData3);\n            }\n          } else if (lightType > 1.5 && lightType < 2.5) {\n            valueLightInflu += calculateParametricRegularPolygon(normalVec,normalData, inputColor, worldPos, posData, colorData, paramData, extraData,extraData2);\n          }else if (lightType > 2.5 && lightType < 3.5) {\n            valueLightInflu += calculateParametricRectangleLight(normalVec,normalData, inputColor, worldPos, posData, colorData, paramData, extraData,extraData2);\n          } else if (lightType > 3.5 && lightType < 4.5) {\n            valueLightInflu += calculateParametricCircleLight(normalVec,normalData, inputColor, worldPos, posData, colorData, paramData, extraData,extraData2);\n          } else if (lightType > 4.5 && lightType < 5.5) {\n              int polygonIndex = int(getNumberFromVec4Array(customTextureIndexArr, customLightIndex));\n              vec4 prePoints[4];\n              int baseIndex = polygonIndex * 4;\n              prePoints[0] = customArr[baseIndex];\n              prePoints[1] = customArr[baseIndex + 1];\n              prePoints[2] = customArr[baseIndex + 2];\n              prePoints[3] = customArr[baseIndex + 3];\n              valueLightInflu += calculateParametricCustomPolygon(normalVec,normalData, inputColor, worldPos, posData, colorData, paramData, extraData, prePoints,extraData2);\n              customLightIndex += 1;\n          }\n        } else {\n          break;\n        }\n      }\n      vec3 finalColor = valueLightInflu;\n      o.rgb = ambientLight * baseColor.rgb  + finalColor;\n      o.a = baseColor.a;\n      ALPHA_TEST(o);\n      return o;\n  }\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl1":{"vert":"\nprecision highp float;\nuniform highp mat4 cc_matView;\n  uniform highp mat4 cc_matProj;\n  uniform highp mat4 cc_matViewProj;\n  uniform highp vec4 cc_cameraPos;\n#if USE_LOCAL\n  uniform highp mat4 cc_matWorld;\n#endif\n#if SAMPLE_FROM_RT\n  #define QUATER_PI         0.78539816340\n  #define HALF_PI           1.57079632679\n  #define PI                3.14159265359\n  #define PI2               6.28318530718\n  #define PI4               12.5663706144\n  #define INV_QUATER_PI     1.27323954474\n  #define INV_HALF_PI       0.63661977237\n  #define INV_PI            0.31830988618\n  #define INV_PI2           0.15915494309\n  #define INV_PI4           0.07957747155\n  #define EPSILON           1e-6\n  #define EPSILON_LOWP      1e-4\n  #define LOG2              1.442695\n  #define EXP_VALUE         2.71828183\n  #define FP_MAX            65504.0\n  #define FP_SCALE          0.0009765625\n  #define FP_SCALE_INV      1024.0\n  #define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n      #define LIGHT_MAP_TYPE_DISABLED 0\n  #define LIGHT_MAP_TYPE_ALL_IN_ONE 1\n  #define LIGHT_MAP_TYPE_INDIRECT_OCCLUSION 2\n  #define REFLECTION_PROBE_TYPE_NONE 0\n  #define REFLECTION_PROBE_TYPE_CUBE 1\n  #define REFLECTION_PROBE_TYPE_PLANAR 2\n  #define REFLECTION_PROBE_TYPE_BLEND 3\n  #define REFLECTION_PROBE_TYPE_BLEND_AND_SKYBOX 4\n      #define LIGHT_TYPE_DIRECTIONAL 0.0\n  #define LIGHT_TYPE_SPHERE 1.0\n  #define LIGHT_TYPE_SPOT 2.0\n  #define LIGHT_TYPE_POINT 3.0\n  #define LIGHT_TYPE_RANGED_DIRECTIONAL 4.0\n  #define IS_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_DIRECTIONAL)) < EPSILON_LOWP)\n  #define IS_SPHERE_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPHERE)) < EPSILON_LOWP)\n  #define IS_SPOT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPOT)) < EPSILON_LOWP)\n  #define IS_POINT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_POINT)) < EPSILON_LOWP)\n  #define IS_RANGED_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_RANGED_DIRECTIONAL)) < EPSILON_LOWP)\n  #define TONE_MAPPING_ACES 0\n  #define TONE_MAPPING_LINEAR 1\n  #define SURFACES_MAX_TRANSMIT_DEPTH_VALUE 999999.0\n  #ifndef CC_SURFACES_DEBUG_VIEW_SINGLE\n    #define CC_SURFACES_DEBUG_VIEW_SINGLE 1\n  #endif\n  #ifndef CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC\n    #define CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC 2\n  #endif\n#endif\nattribute vec3 a_position;\nattribute vec2 a_texCoord;\nattribute vec4 a_color;\n#if TWO_COLORED\n  attribute vec4 a_color2;\n#endif\nvarying vec4 v_color;\n#if TWO_COLORED\n  varying vec4 v_dark;\n#endif\nvarying vec4 color;\nvarying vec2 uv0;\nvarying vec3 worldPos;\nvec4 vert () {\n  vec4 pos = vec4(a_position, 1);\n  #if USE_LOCAL\n    worldPos = (cc_matWorld * pos).xyz;\n    pos = cc_matWorld * pos;\n  #else\n    worldPos = a_position;\n  #endif\n  #if USE_PIXEL_ALIGNMENT\n    pos = cc_matView * pos;\n    pos.xyz = floor(pos.xyz);\n    pos = cc_matProj * pos;\n  #else\n    pos = cc_matViewProj * pos;\n  #endif\n  uv0 = a_texCoord;\n  #if SAMPLE_FROM_RT\n    uv0 = cc_cameraPos.w > 1.0 ? vec2(uv0.x, 1.0 - uv0.y) : uv0;\n  #endif\n  color = a_color;\n #if TWO_COLORED\n    v_dark = a_color2;\n  #endif\n  return pos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\n  precision highp float;\n  vec4 CCSampleWithAlphaSeparated(sampler2D tex, vec2 uv) {\n  #if CC_USE_EMBEDDED_ALPHA\n    return vec4(texture2D(tex, uv).rgb, texture2D(tex, uv + vec2(0.0, 0.5)).r);\n  #else\n    return texture2D(tex, uv);\n  #endif\n  }\n  #if USE_ALPHA_TEST\n          uniform float alphaThreshold;\n  #endif\n  void ALPHA_TEST (in vec4 color) {\n    #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n    #endif\n  }\n  void ALPHA_TEST (in float alpha) {\n    #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n    #endif\n  }\n  varying vec4 color;\n  varying vec3 worldPos;\n  varying vec2 uv0;\n  #if TWO_COLORED\n    varying vec4 v_dark;\n  #endif\n  const float PI2 = 6.2831853;\n  const float PI = 3.1415926;\n  const float PIHALF = 1.5707963;\n  uniform sampler2D shadowMap;\n  uniform sampler2D normalMap;\n  uniform sampler2D spriteLightTexture;\n  uniform sampler2D ambientShadowMap;\n                 uniform vec4 lightPositionsArr[20];\n               uniform vec4 lightColorsArr[20];\n               uniform vec4 lightParamsArr[20];\n               uniform vec4 customTextureIndexArr[4];\n               uniform vec4 lightExtraDataArr[20];\n               uniform vec4 lightExtraDataArr2[20];\n               uniform vec4 lightExtraDataArr3[20];\n               uniform vec4 customArr[64];\n               uniform vec4 shadowMaskArea;\n               uniform vec4 shadowMaskOffset;\n               uniform vec4 ambientColor;\n               uniform vec4 ambientShadowMaskArea;\n               uniform float ambientShadowOnOff;\n               uniform float ambientIntensity;\n               uniform float ambientOnOffResult;\n               uniform float useNormalMap;\n               uniform float lightCount;\n               uniform float lightOnOff;\n               uniform float shadowOnOff;\n               uniform float inEditMode;\n               uniform float useAlphaHeight;\n               uniform float baseHeight;\n               uniform float heightScale;\n               uniform float scaleX;\n               uniform float scaleY;\n    uniform sampler2D cc_spriteTexture;\nfloat intPow10(float base, float fexp) {\n    float t1 = clamp(fexp, 0.0, 10.0);\n    int exponent = int(t1 + 0.5);\n    if (exponent == 0) return 1.0;\n    if (exponent == 1) return base;\n    float result = base;\n    for (int i = 1; i < 10; i++) {\n        if (i >= exponent) break;\n        result *= base;\n    }\n    return result;\n}\nfloat fastSqrt(float x) {\n    if (x <= 0.0) return 0.0;\n    if (x == 1.0) return 1.0;\n    float guess = x * 0.5;\n    guess = 0.5 * (guess + x / guess);\n    guess = 0.5 * (guess + x / guess);\n    guess = 0.5 * (guess + x / guess);\n    guess = 0.5 * (guess + x / guess);\n    guess = 0.5 * (guess + x / guess);\n    guess = 0.5 * (guess + x / guess);\n    return guess;\n}\n  float normalizeRad(float rad) {\n    return mod(mod(rad + PI, PI2) + PI2, PI2) - PI;\n  }\n  bool isAngleRangeRad(float rad, float start, float end) {\n    float r = mod(end - start + PI2, PI2);\n    if (abs(end - start) >= PI2-0.0001) return true;\n    float d = mod(rad - start + PI2, PI2);\n    return d <= r;\n  }\n  float fastAtan2(float y, float x) {\n      if (abs(x) < 1e-8 && abs(y) < 1e-8) return 0.0;\n      if (abs(x) < 1e-8) return y > 0.0 ? 1.570796327 : -1.570796327;\n      float t0, t1, t3, t4;\n      t3 = abs(x);\n      t1 = abs(y);\n      t0 = max(t3, t1);\n      t1 = min(t3, t1);\n      t3 = 1.0 / t0;\n      t3 = t1 * t3;\n      t4 = t3 * t3;\n      t0 = -0.013480470;\n      t0 = t0 * t4 + 0.057477314;\n      t0 = t0 * t4 - 0.121239071;\n      t0 = t0 * t4 + 0.195635925;\n      t0 = t0 * t4 - 0.332994597;\n      t0 = t0 * t4 + 0.999995630;\n      t3 = t0 * t3;\n      if (abs(y) > abs(x)) t3 = 1.570796327 - t3;\n      if (x < 0.0) t3 = 3.141592654 - t3;\n      if (y < 0.0) t3 = -t3;\n      return t3;\n  }\nfloat calculateEffectiveHeight(vec3 normalVec, vec4 normalData) {\n    float effectiveReceiverHeight = baseHeight;\n    if (useAlphaHeight > 0.5) {\n        float alphaHeight = (normalData.a - 0.5) * heightScale;\n        effectiveReceiverHeight = baseHeight + alphaHeight;\n    } else {\n        float surfaceHeightOffset = (normalVec.z - 1.0) * heightScale;\n        effectiveReceiverHeight = baseHeight + surfaceHeightOffset;\n    }\n    return effectiveReceiverHeight;\n}\nfloat calculate3DLighting(vec3 normalVec, vec2 relPx, float effectiveReceiverHeight, float lightHeight) {\n    vec2 tscale = vec2(scaleX>=0.0?1.0:-1.0, scaleY>=0.0?1.0:-1.0);\n    vec3 lightToFrag = vec3(relPx.x*tscale.x, relPx.y*tscale.y, effectiveReceiverHeight - lightHeight);\n    vec3 lightDir = normalize(-lightToFrag);\n    return max(0.0, dot(normalize(normalVec), lightDir));\n}\n  vec3 calculatePointLight(\n      vec3 normalVec,\n      vec4 normalData,\n      vec3 baseColor,\n      vec3 fragWorldPos,\n      vec4 lightPosData,\n      vec4 lightColorData,\n      vec4 lightParamData,\n      vec4 lightExtraData,\n      vec4 lightExtraData2,\n      vec4 lightExtraData3\n  ) {\n      vec3 lightWorldPos = lightPosData.xyz;\n      vec3 lightColor = lightColorData.rgb;\n      float intensity = lightParamData.x;\n      float blendMode = lightParamData.y;\n      float falloff = lightExtraData.w;\n      float innerRadius = lightExtraData.x;\n      float innerAngleStart = lightExtraData.y;\n      float innerAngleEnd = lightExtraData.z;\n      float outerAngleStart = lightExtraData2.x;\n      float outerAngleEnd = lightExtraData2.y;\n      float outerRadius = lightExtraData2.z;\n      vec2 relPxOri = fragWorldPos.xy - lightWorldPos.xy;\n      float distPx = dot(relPxOri, relPxOri);\n      if (distPx > outerRadius * outerRadius) {\n        return vec3(0.0);\n      }\n      float cosA = lightExtraData3.x;\n      float sinA = lightExtraData3.y;\n      vec2 relPx = vec2(\n        dot(relPxOri, vec2(cosA, -sinA)),\n        dot(relPxOri, vec2(sinA, cosA))\n      );\n      float t = 1.0;\n      if (distPx > innerRadius * innerRadius) {\n        float dis = sqrt(distPx);\n        t = 1.0 - smoothstep(innerRadius, outerRadius, dis);\n        t = intPow10(t, falloff);\n      }\n      float angle = fastAtan2(relPx.y,relPx.x);\n      float rad = angle;\n      rad = normalizeRad(rad);\n      float aInnerStart = innerAngleStart;\n      float aInnerEnd = innerAngleEnd;\n      float aOuterStart = outerAngleStart;\n      float aOuterEnd =outerAngleEnd;\n      if(!isAngleRangeRad(rad, aOuterStart, aOuterEnd)) {\n        return vec3(0.0);\n      }\n      float angleAtten = 0.0;\n      float totalAngle = abs(aOuterEnd - aOuterStart);\n      if (totalAngle >= PI2) {\n        angleAtten = 1.0;\n      } else if (isAngleRangeRad(rad, aInnerStart, aInnerEnd)) {\n        angleAtten = 1.0;\n      } else if (isAngleRangeRad(rad, aOuterStart, aInnerStart)) {\n        float edgeLen = mod(aInnerStart - aOuterStart + PI2, PI2);\n        float s = mod(rad - aOuterStart + PI2, PI2) / edgeLen;\n        angleAtten = intPow10(s, falloff);\n      } else if (isAngleRangeRad(rad, aInnerEnd, aOuterEnd)) {\n        float edgeLen = mod(aOuterEnd - aInnerEnd + PI2, PI2);\n        float s = mod(aOuterEnd - rad + PI2, PI2) / edgeLen;\n        angleAtten = intPow10(s, falloff);\n      } else {\n        angleAtten = 0.0;\n      }\n      float attenuation = t * angleAtten;\n      if (attenuation <= 0.001) {\n        return vec3(0.0);\n      };\n    if(useNormalMap<0.5){\n      return baseColor * lightColor * attenuation * intensity;\n    }\n    float lightHeight = lightParamData.w;\n    float effectiveReceiverHeight = calculateEffectiveHeight(normalVec, normalData);\n    float diffuse = calculate3DLighting(normalVec, relPxOri, effectiveReceiverHeight, lightHeight);\n    return baseColor*lightColor * attenuation * diffuse * intensity;\n  }\n  float sdPolygon(vec2 p, float radius, float sides) {\n    float sideCount = max(3.0, floor(sides + 0.5));\n    float angleStep = PI2 / sideCount;\n    float a= fastAtan2(p.y, p.x) + PI;\n    float r = length(p);\n    float segmentAngle = floor((a + angleStep * 0.5) / angleStep) * angleStep;\n    float distToEdge = r * cos(segmentAngle - a) - radius * cos(angleStep * 0.5);\n    float distToVertex = r - radius;\n    return max(distToEdge, distToVertex);\n  }\n  vec3 calculateParametricRegularPolygon(vec3 normalVec,vec4 normalData, vec3 baseColor, vec3 fragWorldPos, vec4 lightPosData, vec4 lightColorData, vec4 lightParamData, vec4 lightExtraData,vec4 lightExtraData2) {\n    vec3 lightPos = lightPosData.xyz;\n    vec3 lightColor = lightColorData.rgb;\n    float intensity = lightParamData.x;\n    float radius = max(0.1, lightExtraData.x);\n    float sides = max(3.0, lightExtraData.y);\n    float falloffRange = lightExtraData2.y;\n    float  falloffExponent = lightExtraData2.x;\n    vec2 relativePos = fragWorldPos.xy - lightPos.xy;\n    float cosA = lightExtraData.z;\n    float sinA = lightExtraData.w;\n    vec2 rel = vec2(\n      dot(relativePos, vec2(cosA, -sinA)),\n      dot(relativePos, vec2(sinA, cosA))\n    );\n    float dist = length(rel);\n    float attenuationDistance =  falloffRange;\n    if (dist > (radius + attenuationDistance)) return vec3(0.0);\n    float sdDist = sdPolygon(rel, radius, sides);\n    float attenuation = 0.0;\n    if (sdDist <= 0.0) {\n      attenuation = intensity;\n    } else if (sdDist < attenuationDistance) {\n      float normalizedDist = sdDist / attenuationDistance;\n      float t = intPow10(1.0 - normalizedDist, falloffExponent);\n      attenuation = intensity * clamp(t, 0.0, 1.0);\n    }\n    if(useNormalMap<0.5){\n      return baseColor * lightColor * attenuation ;\n    }\n    float lightHeight = lightParamData.w;\n    float effectiveReceiverHeight = calculateEffectiveHeight(normalVec, normalData);\n    float diffuse = calculate3DLighting(normalVec, relativePos, effectiveReceiverHeight, lightHeight);\n    return baseColor*lightColor * attenuation * diffuse;\n  }\n  float sdBox( vec2 p, vec2 b )\n  {\n    vec2 d = abs(p)-b;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n  }\n  vec3 calculateParametricRectangleLight(vec3 normalVec,vec4 normalData, vec3 baseColor, vec3 fragWorldPos, vec4 lightPosData, vec4 lightColorData, vec4 lightParamData, vec4 lightExtraData,vec4 lightExtraData2) {\n      vec3 lightPos = lightPosData.xyz;\n      vec3 lightColor = lightColorData.rgb;\n      float intensity = lightParamData.x;\n      float width = max(0.1, lightExtraData.x);\n      float height = max(0.1, lightExtraData.y);\n      float falloffRange = lightExtraData2.y;\n      float falloffExponent = lightExtraData2.x;\n      vec2 halfSize = vec2(width * 0.5, height * 0.5);\n      vec2 relativePos = fragWorldPos.xy - lightPos.xy;\n      float cosA = lightExtraData.z;\n      float sinA = lightExtraData.w;\n      vec2 rel = vec2(\n          dot(relativePos, vec2(cosA, -sinA)),\n          dot(relativePos, vec2(sinA, cosA))\n      );\n      float attenuationDistance =  falloffRange;\n      float maxDist = length(halfSize) + attenuationDistance;\n      if (length(rel) > maxDist) return vec3(0.0);\n      float sdDist = sdBox(rel, halfSize);\n      float attenuation = 0.0;\n      if (sdDist <= 0.0) {\n        attenuation = intensity;\n      } else if (sdDist < attenuationDistance) {\n        float normalizedDist = sdDist / attenuationDistance;\n        float t = intPow10(1.0 - normalizedDist,falloffExponent);\n        attenuation = intensity * clamp(t, 0.0, 1.0);\n      }\n    if(useNormalMap<0.5){\n      return baseColor * lightColor * attenuation ;\n    }\n    float lightHeight = lightParamData.w;\n    float effectiveReceiverHeight = calculateEffectiveHeight(normalVec, normalData);\n    float diffuse = calculate3DLighting(normalVec, relativePos, effectiveReceiverHeight, lightHeight);\n      return baseColor * lightColor * attenuation * diffuse;\n  }\n  vec3 calculateParametricCircleLight(vec3 normalVec,vec4 normalData, vec3 baseColor, vec3 fragWorldPos, vec4 lightPosData, vec4 lightColorData, vec4 lightParamData, vec4 lightExtraData,vec4 lightExtraData2) {\n      vec3 lightPos = lightPosData.xyz;\n      vec3 lightColor = lightColorData.rgb;\n      float intensity = lightParamData.x;\n      float radius = max(0.1, lightExtraData.x);\n      float falloffRange = lightExtraData2.y;\n      float falloffExponent = lightExtraData2.x;\n      float cosA = lightExtraData.z;\n      float sinA = lightExtraData.w;\n      vec2 relativePos = fragWorldPos.xy - lightPos.xy;\n      vec2 rel = vec2(\n          dot(relativePos, vec2(cosA, -sinA)),\n          dot(relativePos, vec2(sinA, cosA))\n      );\n      float dist = length(rel);\n      float attenuationDistance =  falloffRange;\n      float maxDist = radius + attenuationDistance;\n      if (dist > maxDist) return vec3(0.0);\n      float attenuation = 0.0;\n      if (dist <= radius) {\n        attenuation = intensity;\n      } else if (dist < maxDist) {\n        float normalizedDist = (dist - radius) / attenuationDistance;\n        float t = intPow10(1.0 - normalizedDist, falloffExponent);\n        attenuation = intensity * clamp(t, 0.0, 1.0);\n      }\n    if(useNormalMap<0.5){\n      return baseColor * lightColor * attenuation ;\n    }\n    float lightHeight = lightParamData.w;\n    float effectiveReceiverHeight = calculateEffectiveHeight(normalVec, normalData);\n    float diffuse = calculate3DLighting(normalVec, relativePos, effectiveReceiverHeight, lightHeight);\n      return baseColor * lightColor * attenuation * diffuse;\n  }\n  float sdOptimizedPolygon(vec2 p, vec4 precomputedData[4], int pointCount) {\n    const float epsilon = 0.00001;\n    float minDist = 1e20;\n    for (int i = 0; i < 4; ++i) {\n      if (i >= pointCount) break;\n      vec2 a = precomputedData[i].xy;\n      vec2 edgeVec = vec2(precomputedData[i].z, precomputedData[i].w);\n      vec2 pa = p - a;\n      float edgeLengthSq = dot(edgeVec, edgeVec);\n      if (edgeLengthSq > 0.0) {\n        float h = clamp(dot(pa, edgeVec) / edgeLengthSq, 0.0, 1.0);\n        minDist = min(minDist, length(pa - edgeVec * h));\n      }\n    }\n    bool inside = false;\n    for (int i = 0; i < 4; ++i) {\n      if (i >= pointCount) break;\n      vec2 a = precomputedData[i].xy;\n      vec2 b = a + vec2(precomputedData[i].z, precomputedData[i].w);\n      if (((a.y <= p.y) && (b.y > p.y)) || ((a.y > p.y) && (b.y <= p.y))) {\n        float crossProduct = (b.x - a.x) * (p.y - a.y) - (b.y - a.y) * (p.x - a.x);\n        if (abs(crossProduct) < epsilon) {\n          crossProduct = 0.0;\n        }\n        if (a.y < b.y) {\n          inside = inside != (crossProduct > 0.0);\n        } else {\n          inside = inside != (crossProduct < 0.0);\n        }\n      }\n    }\n    return inside ? -minDist : minDist;\n  }\nvec3 calculateParametricCustomPolygon(vec3 normalVec,vec4 normalData, vec3 baseColor, vec3 fragWorldPos, vec4 lightPosData, vec4 lightColorData, vec4 lightParamData, vec4 extraPackedData, vec4 precomputedPoints[4],vec4 extraData2) {\n    int pointCount = int(extraPackedData.x);\n    float falloffRange = extraPackedData.y;\n    float falloffExponent = extraPackedData.z;\n    if (pointCount < 3) return vec3(0.0);\n    vec3 lightPos = lightPosData.xyz;\n    vec3 lightColor = lightColorData.rgb;\n    float intensity = lightParamData.x;\n    vec2 center = vec2(extraData2.z,extraData2.w);\n    vec2 relativePos = fragWorldPos.xy - lightPos.xy;\n    float cosA = extraData2.x;\n    float sinA = extraData2.y;\n    vec2 fragLocalPos = vec2(\n        dot(relativePos, vec2(cosA, -sinA)),\n        dot(relativePos, vec2(sinA, cosA))\n    );\n    float maxRadius = extraPackedData.w +falloffRange ;\n    vec2 disv = fragLocalPos-center;\n    if ((disv.x*disv.x+disv.y*disv.y) > maxRadius*maxRadius) return vec3(0.0);\n    vec2 checkLocalPos = fragLocalPos;\n    bool quickInside = false;\n    for (int k = 0; k < 4; ++k) {\n      if (k >= pointCount) break;\n      vec2 a = precomputedPoints[k].xy;\n      vec2 b = a + vec2(precomputedPoints[k].z, precomputedPoints[k].w);\n      if (((a.y <= checkLocalPos.y) && (b.y > checkLocalPos.y)) ||\n        ((a.y > checkLocalPos.y) && (b.y <= checkLocalPos.y))) {\n        float crossProduct = (b.x - a.x) * (checkLocalPos.y - a.y) - (b.y - a.y) * (checkLocalPos.x - a.x);\n        if (a.y < b.y) {\n          quickInside = quickInside != (crossProduct > 0.0);\n        } else {\n          quickInside = quickInside != (crossProduct < 0.0);\n        }\n      }\n    }\n    bool isRangeZero = (falloffRange<1.0);\n    float sdDist =  0.0;\n    if(quickInside){\n      sdDist = 0.0;\n    }else{\n      if(isRangeZero){\n        sdDist  = falloffRange + 1.0;\n      }else{\n        sdDist = sdOptimizedPolygon(fragLocalPos, precomputedPoints, pointCount);\n      }\n    }\n    float attenuation= 1.0;\n    if (sdDist <= 0.0) {\n        attenuation = intensity;\n    } else if (sdDist < falloffRange) {\n        float normalizedDist = sdDist / falloffRange;\n        float t= intPow10(1.0 - normalizedDist, falloffExponent);\n        attenuation = intensity * clamp(t, 0.0, 1.0);\n    } else {\n        return vec3(0.0);\n    }\n    if(useNormalMap<0.5){\n      return baseColor * lightColor * attenuation ;\n    }\n    float lightHeight = lightParamData.w;\n    float effectiveReceiverHeight = calculateEffectiveHeight(normalVec, normalData);\n    float diffuse = calculate3DLighting(normalVec, relativePos, effectiveReceiverHeight, lightHeight);\n    return baseColor * lightColor * attenuation * diffuse;\n}\n vec3 calculateSpriteLight(vec3 normalVec, vec4 normalData, vec3 baseColor, vec3 fragWorldPos, vec4 lightPosData, vec4 lightColorData, vec4 lightParamData,vec4 lightExtraData,vec4 lightExtraData2,vec4 lightExtraData3) {\n    vec3 lightPos = lightPosData.xyz;\n    vec3 lightColor = lightColorData.rgb;\n    float intensity = lightParamData.x;\n    float cosA = lightExtraData.x;\n    float sinA = lightExtraData.y;\n    float rangeX = lightExtraData.z;\n    float rangeY = lightExtraData.w;\n    if (rangeX < 0.0001 || rangeY < 0.0001) return vec3(0.0);\n    vec2 relativePos = fragWorldPos.xy - lightPos.xy;\n    float maxRange = max(rangeX, rangeY);\n    if (dot(relativePos, relativePos) > maxRange * maxRange ) return vec3(0.0);\n    vec2 rel = vec2(\n        dot(relativePos, vec2(cosA, -sinA)),\n        dot(relativePos, vec2(sinA, cosA))\n    );\n    vec2 halfSizeSelf = vec2(rangeX * 0.5, rangeY * 0.5) ;\n    if(abs(rel.x) > halfSizeSelf.x || abs(rel.y) > halfSizeSelf.y) return vec3(0.0);\n    vec2 spriteUV = rel*vec2(1.0/rangeX,1.0/rangeY) + 0.5;\n    vec2 uvOrigin = lightExtraData2.xy;\n    vec2 uvSize = lightExtraData2.zw;\n    vec2 atlasUV = uvOrigin + spriteUV * uvSize;\n    vec4 spriteTexColor =texture2D(spriteLightTexture, atlasUV);\n    if (spriteTexColor.a < 0.001) return vec3(0.0);\n    float attenuation = spriteTexColor.a;\n    vec3 finalLight = spriteTexColor.rgb * lightColor * intensity * attenuation;\n    if(useNormalMap<0.5){\n      return baseColor * finalLight  ;\n    }\n    float lightHeight = lightParamData.w;\n    float effectiveReceiverHeight = calculateEffectiveHeight(normalVec, normalData);\n    float diffuse = calculate3DLighting(normalVec, relativePos, effectiveReceiverHeight, lightHeight);\n    return baseColor * finalLight * diffuse;\n}\n  vec2 getShadowMapUV(vec2 fragWorldPos) {\n    return ((fragWorldPos.xy - shadowMaskOffset.xy) * shadowMaskOffset.zw) / shadowMaskArea.zw;\n  }\n  vec2 getAmbientShadowMapUV(vec2 fragWorldPos) {\n    return ((fragWorldPos.xy - shadowMaskOffset.xy) * shadowMaskOffset.zw) / ambientShadowMaskArea.zw;\n  }\n  float getShadowBit(vec4 shadowMask, float id) {\n    int idx = int(id);\n    int channel = idx / 8;\n    int bit = idx - channel * 8;\n    float v = 0.0;\n    if (channel == 0) v = shadowMask.r;\n    else if (channel == 1) v = shadowMask.g;\n    else if (channel == 2) v = shadowMask.b;\n    else if (channel == 3) v = shadowMask.a;\n    float mask = 255.0 * v + 0.001;\n    return mod(floor(mask / intPow10(2.0, float(bit))+ 0.001), 2.0);\n  }\n  float getNumberFromVec4Array(vec4 arr[16/4], int index) {\n    int idx = index;\n    int arrIdx = idx / 4;\n    int compIdx = idx - arrIdx * 4;\n    vec4 v = vec4(0.0);\n    if (arrIdx == 0) v = arr[0];\n    else if (arrIdx == 1) v = arr[1];\n    else if (arrIdx == 2) v = arr[2];\n    else if (arrIdx == 3) v = arr[3];\n    if (compIdx == 0) return v.x;\n    else if (compIdx == 1) return v.y;\n    else if (compIdx == 2) return v.z;\n    else return v.w;\n  }\n  bool isInLightById(float lightId) {\n      if(shadowOnOff == 0.0) return true;\n      vec2 uv = getShadowMapUV(worldPos.xy);\n      vec4 shadowMask = texture2D(shadowMap, uv);\n      return getShadowBit(shadowMask, lightId) != 0.0 ;\n  }\n  vec4 frag () {\n      vec4 o = vec4(1, 1, 1, 1);\n        o *= CCSampleWithAlphaSeparated(cc_spriteTexture, uv0);\n      vec4 baseColor = o;\n      #if TWO_COLORED\n        baseColor.a = o.a * color.a;\n        baseColor.rgb = ((o.a - 1.0) * v_dark.a + 1.0 - o.rgb) * v_dark.rgb + o.rgb * color.rgb;\n      #else\n        baseColor = o * color;\n      #endif\n      if(lightOnOff<0.5){\n        ALPHA_TEST(baseColor);\n        return baseColor;\n      }\n      if(ambientShadowOnOff>0.5){\n        vec2 uv = getAmbientShadowMapUV(worldPos.xy);\n        vec4 sc = texture2D(ambientShadowMap, uv);\n          baseColor.rgb *= sc.rgb;\n      }\n      vec3 normalVec = vec3(0.0, 0.0, 1.0);\n      vec4 normalData = vec4(0.0, 0.0, 1.0, 1.0);\n      if(useNormalMap >0.5) {\n        normalData = texture2D(normalMap, uv0);\n        normalVec = normalize(normalData.xyz * 2.0 - 1.0);\n      }\n      vec3 dummyColor =  vec3(1.0);\n      vec3 ambientLight = vec3(0.0);\n      vec3 valueLightInflu = vec3(0.0);\n      if(ambientOnOffResult>0.5){\n          ambientLight =  ambientColor.rgb * ambientIntensity;\n      }\n      int customLightIndex = 0;\n      for (int i = 0; i < 20; ++i) {\n        if (float(i) < lightCount) {\n          vec4 posData = lightPositionsArr[i];\n          vec4 colorData = lightColorsArr[i];\n          vec4 paramData = lightParamsArr[i];\n          vec4 extraData = lightExtraDataArr[i];\n          vec4 extraData2 = lightExtraDataArr2[i];\n          vec4 extraData3 = lightExtraDataArr3[i];\n          float lightType = posData.w;\n          float lightId = posData.z;\n          vec3 inputColor =(paramData.y == 0.0?baseColor.rgb:dummyColor);\n          if (lightType < 0.5) {\n            if( isInLightById(lightId)||inEditMode>0.5) {\n              valueLightInflu += calculatePointLight(normalVec,normalData, inputColor, worldPos, posData, colorData, paramData, extraData, extraData2,extraData3);\n            }\n          } else if (lightType > 0.5 && lightType < 1.5) {\n            vec3 lightPos = posData.xyz;\n            float rangeX = extraData.z;\n            float rangeY = extraData.w;\n            vec2 relativePos = worldPos.xy - lightPos.xy;\n            float maxRange = max(rangeX, rangeY);\n            if (dot(relativePos, relativePos) <= maxRange * maxRange) {\n                valueLightInflu += calculateSpriteLight(normalVec,normalData, inputColor, worldPos, posData, colorData, paramData, extraData, extraData2,extraData3);\n            }\n          } else if (lightType > 1.5 && lightType < 2.5) {\n            valueLightInflu += calculateParametricRegularPolygon(normalVec,normalData, inputColor, worldPos, posData, colorData, paramData, extraData,extraData2);\n          }else if (lightType > 2.5 && lightType < 3.5) {\n            valueLightInflu += calculateParametricRectangleLight(normalVec,normalData, inputColor, worldPos, posData, colorData, paramData, extraData,extraData2);\n          } else if (lightType > 3.5 && lightType < 4.5) {\n            valueLightInflu += calculateParametricCircleLight(normalVec,normalData, inputColor, worldPos, posData, colorData, paramData, extraData,extraData2);\n          } else if (lightType > 4.5 && lightType < 5.5) {\n              int polygonIndex = int(getNumberFromVec4Array(customTextureIndexArr, customLightIndex));\n              vec4 prePoints[4];\n              int baseIndex = polygonIndex * 4;\n              if(customLightIndex==0)\n                  {\n                      prePoints[0] = customArr[0*4];\n                      prePoints[1] = customArr[0*4 + 1];\n                      prePoints[2] = customArr[0*4 + 2];\n                      prePoints[3] = customArr[0*4 + 3];\n                  }\n              else if(customLightIndex==1)\n                  {\n                      prePoints[0] = customArr[1*4];\n                      prePoints[1] = customArr[1*4 + 1];\n                      prePoints[2] = customArr[1*4 + 2];\n                      prePoints[3] = customArr[1*4 + 3];\n                  }\n              else if(customLightIndex==2)\n                  {\n                      prePoints[0] = customArr[2*4];\n                      prePoints[1] = customArr[2*4 + 1];\n                      prePoints[2] = customArr[2*4 + 2];\n                      prePoints[3] = customArr[2*4 + 3];\n                  }\n              else if(customLightIndex==3)\n                  {\n                      prePoints[0] = customArr[3*4];\n                      prePoints[1] = customArr[3*4 + 1];\n                      prePoints[2] = customArr[3*4 + 2];\n                      prePoints[3] = customArr[3*4 + 3];\n                  }\n              else if(customLightIndex==4)\n                  {\n                      prePoints[0] = customArr[4*4];\n                      prePoints[1] = customArr[4*4 + 1];\n                      prePoints[2] = customArr[4*4 + 2];\n                      prePoints[3] = customArr[4*4 + 3];\n                  }\n              else if(customLightIndex==5)\n                  {\n                      prePoints[0] = customArr[5*4];\n                      prePoints[1] = customArr[5*4 + 1];\n                      prePoints[2] = customArr[5*4 + 2];\n                      prePoints[3] = customArr[5*4 + 3];\n                  }\n              else if(customLightIndex==6)\n                  {\n                      prePoints[0] = customArr[6*4];\n                      prePoints[1] = customArr[6*4 + 1];\n                      prePoints[2] = customArr[6*4 + 2];\n                      prePoints[3] = customArr[6*4 + 3];\n                  }\n              else if(customLightIndex==7)\n                  {\n                      prePoints[0] = customArr[7*4];\n                      prePoints[1] = customArr[7*4 + 1];\n                      prePoints[2] = customArr[7*4 + 2];\n                      prePoints[3] = customArr[7*4 + 3];\n                  }\n              else if(customLightIndex==8)\n                  {\n                      prePoints[0] = customArr[8*4];\n                      prePoints[1] = customArr[8*4 + 1];\n                      prePoints[2] = customArr[8*4 + 2];\n                      prePoints[3] = customArr[8*4 + 3];\n                  }\n              else if(customLightIndex==9)\n                  {\n                      prePoints[0] = customArr[9*4];\n                      prePoints[1] = customArr[9*4 + 1];\n                      prePoints[2] = customArr[9*4 + 2];\n                      prePoints[3] = customArr[9*4 + 3];\n                  }\n              else if(customLightIndex==10)\n                  {\n                      prePoints[0] = customArr[10*4];\n                      prePoints[1] = customArr[10*4 + 1];\n                      prePoints[2] = customArr[10*4 + 2];\n                      prePoints[3] = customArr[10*4 + 3];\n                  }\n              else if(customLightIndex==11)\n                  {\n                      prePoints[0] = customArr[11*4];\n                      prePoints[1] = customArr[11*4 + 1];\n                      prePoints[2] = customArr[11*4 + 2];\n                      prePoints[3] = customArr[11*4 + 3];\n                  }\n              else if(customLightIndex==12)\n                  {\n                      prePoints[0] = customArr[12*4];\n                      prePoints[1] = customArr[12*4 + 1];\n                      prePoints[2] = customArr[12*4 + 2];\n                      prePoints[3] = customArr[12*4 + 3];\n                  }\n              else if(customLightIndex==13)\n                  {\n                      prePoints[0] = customArr[13*4];\n                      prePoints[1] = customArr[13*4 + 1];\n                      prePoints[2] = customArr[13*4 + 2];\n                      prePoints[3] = customArr[13*4 + 3];\n                  }\n              else if(customLightIndex==14)\n                  {\n                      prePoints[0] = customArr[14*4];\n                      prePoints[1] = customArr[14*4 + 1];\n                      prePoints[2] = customArr[14*4 + 2];\n                      prePoints[3] = customArr[14*4 + 3];\n                  }\n              else if(customLightIndex==15)\n                  {\n                      prePoints[0] = customArr[15*4];\n                      prePoints[1] = customArr[15*4 + 1];\n                      prePoints[2] = customArr[15*4 + 2];\n                      prePoints[3] = customArr[15*4 + 3];\n                  }\n              valueLightInflu += calculateParametricCustomPolygon(normalVec,normalData, inputColor, worldPos, posData, colorData, paramData, extraData, prePoints,extraData2);\n              customLightIndex += 1;\n          }\n        } else {\n          break;\n        }\n      }\n      vec3 finalColor = valueLightInflu;\n      o.rgb = ambientLight * baseColor.rgb  + finalColor;\n      o.a = baseColor.a;\n      ALPHA_TEST(o);\n      return o;\n  }\nvoid main() { gl_FragColor = frag(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCLocal","defines":["USE_LOCAL"]}],"samplerTextures":[{"name":"cc_spriteTexture","defines":[]}],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":56,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":249}},"defines":[{"name":"USE_LOCAL","type":"boolean"},{"name":"SAMPLE_FROM_RT","type":"boolean"},{"name":"TWO_COLORED","type":"boolean"},{"name":"USE_PIXEL_ALIGNMENT","type":"boolean"},{"name":"CC_USE_EMBEDDED_ALPHA","type":"boolean"},{"name":"USE_ALPHA_TEST","type":"boolean"}]}],[{"passes":[{"program":"../Light2D/light-receiver|sprite-vs:vert|sprite-fs:frag","blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":4,"blendDstAlpha":4}]},"rasterizerState":{"cullMode":0},"depthStencilState":{"depthTest":false,"depthWrite":false},"properties":{"alphaThreshold":{"type":13,"value":[0.01]},"lightOnOff":{"type":13,"value":[1]},"shadowOnOff":{"type":13,"value":[0]},"ambientColor":{"type":16,"value":[1,1,1,1]},"ambientIntensity":{"type":13,"value":[0.4]},"ambientOnOffResult":{"type":13,"value":[1]},"lightCount":{"type":13,"value":[0]},"lightPositionsArr":{"type":16,"value":[0,0,0,0]},"lightColorsArr":{"type":16,"value":[0,0,0,0]},"lightParamsArr":{"type":16,"value":[0,0,0,0]},"lightExtraDataArr":{"type":16,"value":[0,0,0,0]},"lightExtraDataArr2":{"type":16,"value":[0,0,0,0]},"lightExtraDataArr3":{"type":16,"value":[0,0,0,0]},"customArr":{"type":16,"value":[0,0,0,0]},"useNormalMap":{"type":13,"value":[0]},"normalMap":{"value":"white","type":28},"useAlphaHeight":{"type":13,"value":[0]},"baseHeight":{"type":13,"value":[0]},"heightScale":{"type":13,"value":[5]},"spriteLightTexture":{"value":"white","type":28},"shadowMap":{"value":"white","type":28},"shadowMaskArea":{"type":16,"value":[0,0,0,0]},"shadowMaskOffset":{"type":16,"value":[0,0,0,0]},"inEditMode":{"type":13,"value":[1]},"customPolygonCount":{"type":13,"value":[0]},"customTextureIndexArr":{"type":16,"value":[0,0,0,0]},"ambientShadowOnOff":{"type":13,"value":[0]},"ambientShadowMap":{"value":"white","type":28},"ambientShadowMaskArea":{"type":16,"value":[0,0,0,0]},"scaleX":{"type":13,"value":[1]},"scaleY":{"type":13,"value":[1]}}}]}]]],0,0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[1],0,[],[],[]],[[{"base":"2,2,2,2,0,0","mipmaps":["eaz5aort5LA7RCpCZIMLW2"]}],[2],0,[],[],[]],[[[11,"ambient-shadow",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_INSTANCING":true}],[[[{"dirLightAngle":300,"dirShadowOffset":-89.9},"dirShadowColor",8,[4,1795162112],"srcTexture",6,0]],11]]],0,0,[0,0],[16,6],[31,32]],[[{"fmt":"0","w":0,"h":0},-1],[1],0,[],[],[]],[[{"base":"2,2,2,2,0,0","mipmaps":["eefa5AjP1LcZWeB9eqidZM"]}],[2],0,[],[],[]],[[{"name":"man_et_n","rect":{"x":0,"y":0,"width":1024,"height":1024},"offset":{"x":0,"y":0},"originalSize":{"width":1024,"height":1024},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-512,-512,0,512,-512,0,-512,512,0,512,512,0],"indexes":[0,1,2,2,1,3],"uv":[0,1024,1024,1024,0,0,1024,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-512,"y":-512,"z":0},"maxPos":{"x":512,"y":512,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[1],[33]],[[[57,[[58,"ShadowFlow",[[59,"ShadowStage"]]],[60,"ForwardFlow",1,[[61,"ForwardStage",[[62,["default"]],[63,true,1,["default"]]]]]]]]],0,0,[],[],[]]]]
